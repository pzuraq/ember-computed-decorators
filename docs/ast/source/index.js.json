{
  "type": "File",
  "start": 0,
  "end": 26956,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 876,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 26956,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 876,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 0,
        "end": 26,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 26
          }
        },
        "specifiers": [
          {
            "type": "ImportDefaultSpecifier",
            "start": 7,
            "end": 12,
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 12
              }
            },
            "local": {
              "type": "Identifier",
              "start": 7,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 7
                },
                "end": {
                  "line": 1,
                  "column": 12
                },
                "identifierName": "Ember"
              },
              "name": "Ember"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 18,
          "end": 25,
          "loc": {
            "start": {
              "line": 1,
              "column": 18
            },
            "end": {
              "line": 1,
              "column": 25
            }
          },
          "extra": {
            "rawValue": "ember",
            "raw": "'ember'"
          },
          "value": "ember"
        }
      },
      {
        "type": "ImportDeclaration",
        "start": 27,
        "end": 84,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 57
          }
        },
        "specifiers": [
          {
            "type": "ImportDefaultSpecifier",
            "start": 34,
            "end": 47,
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 20
              }
            },
            "local": {
              "type": "Identifier",
              "start": 34,
              "end": 47,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 7
                },
                "end": {
                  "line": 2,
                  "column": 20
                },
                "identifierName": "computedMacro"
              },
              "name": "computedMacro"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 53,
          "end": 83,
          "loc": {
            "start": {
              "line": 2,
              "column": 26
            },
            "end": {
              "line": 2,
              "column": 56
            }
          },
          "extra": {
            "rawValue": "ember-macro-helpers/computed",
            "raw": "'ember-macro-helpers/computed'"
          },
          "value": "ember-macro-helpers/computed"
        }
      },
      {
        "type": "ImportDeclaration",
        "start": 86,
        "end": 135,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 49
          }
        },
        "specifiers": [
          {
            "type": "ImportDefaultSpecifier",
            "start": 93,
            "end": 105,
            "loc": {
              "start": {
                "line": 4,
                "column": 7
              },
              "end": {
                "line": 4,
                "column": 19
              }
            },
            "local": {
              "type": "Identifier",
              "start": 93,
              "end": 105,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 7
                },
                "end": {
                  "line": 4,
                  "column": 19
                },
                "identifierName": "extractValue"
              },
              "name": "extractValue"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 111,
          "end": 134,
          "loc": {
            "start": {
              "line": 4,
              "column": 25
            },
            "end": {
              "line": 4,
              "column": 48
            }
          },
          "extra": {
            "rawValue": "./utils/extract-value",
            "raw": "'./utils/extract-value'"
          },
          "value": "./utils/extract-value"
        }
      },
      {
        "type": "ImportDeclaration",
        "start": 136,
        "end": 216,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 36
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 147,
            "end": 156,
            "loc": {
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 11
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 147,
              "end": 156,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 2
                },
                "end": {
                  "line": 6,
                  "column": 11
                },
                "identifierName": "decorator"
              },
              "name": "decorator"
            },
            "local": {
              "type": "Identifier",
              "start": 147,
              "end": 156,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 2
                },
                "end": {
                  "line": 6,
                  "column": 11
                },
                "identifierName": "decorator"
              },
              "name": "decorator"
            }
          },
          {
            "type": "ImportSpecifier",
            "start": 160,
            "end": 179,
            "loc": {
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 21
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 160,
              "end": 179,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 2
                },
                "end": {
                  "line": 7,
                  "column": 21
                },
                "identifierName": "decoratorWithParams"
              },
              "name": "decoratorWithParams"
            },
            "local": {
              "type": "Identifier",
              "start": 160,
              "end": 179,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 2
                },
                "end": {
                  "line": 7,
                  "column": 21
                },
                "identifierName": "decoratorWithParams"
              },
              "name": "decoratorWithParams"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 187,
          "end": 215,
          "loc": {
            "start": {
              "line": 8,
              "column": 7
            },
            "end": {
              "line": 8,
              "column": 35
            }
          },
          "extra": {
            "rawValue": "./utils/decorator-wrappers",
            "raw": "'./utils/decorator-wrappers'"
          },
          "value": "./utils/decorator-wrappers"
        }
      },
      {
        "type": "ImportDeclaration",
        "start": 218,
        "end": 330,
        "loc": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 34
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 229,
            "end": 256,
            "loc": {
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 29
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 229,
              "end": 256,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 2
                },
                "end": {
                  "line": 11,
                  "column": 29
                },
                "identifierName": "decoratorWithRequiredParams"
              },
              "name": "decoratorWithRequiredParams"
            },
            "local": {
              "type": "Identifier",
              "start": 229,
              "end": 256,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 2
                },
                "end": {
                  "line": 11,
                  "column": 29
                },
                "identifierName": "decoratorWithRequiredParams"
              },
              "name": "decoratorWithRequiredParams"
            }
          },
          {
            "type": "ImportSpecifier",
            "start": 260,
            "end": 295,
            "loc": {
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 37
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 260,
              "end": 295,
              "loc": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 12,
                  "column": 37
                },
                "identifierName": "decoratedPropertyWithRequiredParams"
              },
              "name": "decoratedPropertyWithRequiredParams"
            },
            "local": {
              "type": "Identifier",
              "start": 260,
              "end": 295,
              "loc": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 12,
                  "column": 37
                },
                "identifierName": "decoratedPropertyWithRequiredParams"
              },
              "name": "decoratedPropertyWithRequiredParams"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 303,
          "end": 329,
          "loc": {
            "start": {
              "line": 13,
              "column": 7
            },
            "end": {
              "line": 13,
              "column": 33
            }
          },
          "extra": {
            "rawValue": "./utils/decorator-macros",
            "raw": "'./utils/decorator-macros'"
          },
          "value": "./utils/decorator-macros"
        },
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that turns a function into a computed property.\n *\n * In your application where you would normally have:\n *\n * ```javascript\n * foo: Ember.computed('someKey', 'otherKey', function() {\n *   var someKey = this.get('someKey');\n *   var otherKey = this.get('otherKey');\n *\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed('someKey', 'otherKey')\n * foo(someKey, otherKey) {\n *   // Do Stuff\n * }\n * ```\n *\n * #### Without Dependent Keys\n *\n * ```javascript\n * foo: Ember.computed(function() {\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed\n * foo() {\n *   // Do Stuff\n * }\n * ```\n *\n * #### \"Real World\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n *\n * #### \"Real World get/set syntax\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name: {\n *     get(first, last) {\n *       return `${first} ${last}`;\n *     },\n *\n *     set(value, first, last) {\n *       // ...\n *     }\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} propertyNames - List of property keys this computed is dependent on\n ",
            "start": 332,
            "end": 1958,
            "loc": {
              "start": {
                "line": 15,
                "column": 0
              },
              "end": {
                "line": 98,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "Identifier",
        "start": 1959,
        "end": 2235,
        "loc": {
          "start": {
            "line": 99,
            "column": 0
          },
          "end": {
            "line": 106,
            "column": 3
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 1965,
            "end": 2234,
            "loc": {
              "start": {
                "line": 99,
                "column": 6
              },
              "end": {
                "line": 106,
                "column": 2
              }
            },
            "id": {
              "type": "Identifier",
              "start": 1965,
              "end": 1973,
              "loc": {
                "start": {
                  "line": 99,
                  "column": 6
                },
                "end": {
                  "line": 99,
                  "column": 14
                },
                "identifierName": "computed"
              },
              "name": "computed",
              "leadingComments": null
            },
            "init": {
              "type": "CallExpression",
              "start": 1976,
              "end": 2234,
              "loc": {
                "start": {
                  "line": 99,
                  "column": 17
                },
                "end": {
                  "line": 106,
                  "column": 2
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 1976,
                "end": 1995,
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 17
                  },
                  "end": {
                    "line": 99,
                    "column": 36
                  },
                  "identifierName": "decoratorWithParams"
                },
                "name": "decoratorWithParams"
              },
              "arguments": [
                {
                  "type": "FunctionExpression",
                  "start": 1996,
                  "end": 2233,
                  "loc": {
                    "start": {
                      "line": 99,
                      "column": 37
                    },
                    "end": {
                      "line": 106,
                      "column": 1
                    }
                  },
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "start": 2005,
                      "end": 2011,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 46
                        },
                        "end": {
                          "line": 99,
                          "column": 52
                        },
                        "identifierName": "target"
                      },
                      "name": "target"
                    },
                    {
                      "type": "Identifier",
                      "start": 2013,
                      "end": 2016,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 54
                        },
                        "end": {
                          "line": 99,
                          "column": 57
                        },
                        "identifierName": "key"
                      },
                      "name": "key"
                    },
                    {
                      "type": "Identifier",
                      "start": 2018,
                      "end": 2022,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 59
                        },
                        "end": {
                          "line": 99,
                          "column": 63
                        },
                        "identifierName": "desc"
                      },
                      "name": "desc"
                    },
                    {
                      "type": "Identifier",
                      "start": 2024,
                      "end": 2030,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 65
                        },
                        "end": {
                          "line": 99,
                          "column": 71
                        },
                        "identifierName": "params"
                      },
                      "name": "params"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2032,
                    "end": 2233,
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 73
                      },
                      "end": {
                        "line": 106,
                        "column": 1
                      }
                    },
                    "body": [
                      {
                        "type": "IfStatement",
                        "start": 2036,
                        "end": 2154,
                        "loc": {
                          "start": {
                            "line": 100,
                            "column": 2
                          },
                          "end": {
                            "line": 102,
                            "column": 3
                          }
                        },
                        "test": {
                          "type": "UnaryExpression",
                          "start": 2040,
                          "end": 2054,
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 6
                            },
                            "end": {
                              "line": 100,
                              "column": 20
                            }
                          },
                          "operator": "!",
                          "prefix": true,
                          "argument": {
                            "type": "MemberExpression",
                            "start": 2041,
                            "end": 2054,
                            "loc": {
                              "start": {
                                "line": 100,
                                "column": 7
                              },
                              "end": {
                                "line": 100,
                                "column": 20
                              }
                            },
                            "object": {
                              "type": "Identifier",
                              "start": 2041,
                              "end": 2045,
                              "loc": {
                                "start": {
                                  "line": 100,
                                  "column": 7
                                },
                                "end": {
                                  "line": 100,
                                  "column": 11
                                },
                                "identifierName": "desc"
                              },
                              "name": "desc"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 2046,
                              "end": 2054,
                              "loc": {
                                "start": {
                                  "line": 100,
                                  "column": 12
                                },
                                "end": {
                                  "line": 100,
                                  "column": 20
                                },
                                "identifierName": "writable"
                              },
                              "name": "writable"
                            },
                            "computed": false
                          },
                          "extra": {
                            "parenthesizedArgument": false
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "start": 2056,
                          "end": 2154,
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 22
                            },
                            "end": {
                              "line": 102,
                              "column": 3
                            }
                          },
                          "body": [
                            {
                              "type": "ThrowStatement",
                              "start": 2062,
                              "end": 2150,
                              "loc": {
                                "start": {
                                  "line": 101,
                                  "column": 4
                                },
                                "end": {
                                  "line": 101,
                                  "column": 92
                                }
                              },
                              "argument": {
                                "type": "NewExpression",
                                "start": 2068,
                                "end": 2149,
                                "loc": {
                                  "start": {
                                    "line": 101,
                                    "column": 10
                                  },
                                  "end": {
                                    "line": 101,
                                    "column": 91
                                  }
                                },
                                "callee": {
                                  "type": "Identifier",
                                  "start": 2072,
                                  "end": 2077,
                                  "loc": {
                                    "start": {
                                      "line": 101,
                                      "column": 14
                                    },
                                    "end": {
                                      "line": 101,
                                      "column": 19
                                    },
                                    "identifierName": "Error"
                                  },
                                  "name": "Error"
                                },
                                "arguments": [
                                  {
                                    "type": "StringLiteral",
                                    "start": 2078,
                                    "end": 2148,
                                    "loc": {
                                      "start": {
                                        "line": 101,
                                        "column": 20
                                      },
                                      "end": {
                                        "line": 101,
                                        "column": 90
                                      }
                                    },
                                    "extra": {
                                      "rawValue": "ember-computed-decorators does not support using getters and setters",
                                      "raw": "'ember-computed-decorators does not support using getters and setters'"
                                    },
                                    "value": "ember-computed-decorators does not support using getters and setters"
                                  }
                                ]
                              }
                            }
                          ],
                          "directives": []
                        },
                        "alternate": null
                      },
                      {
                        "type": "VariableDeclaration",
                        "start": 2158,
                        "end": 2189,
                        "loc": {
                          "start": {
                            "line": 104,
                            "column": 2
                          },
                          "end": {
                            "line": 104,
                            "column": 33
                          }
                        },
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "start": 2162,
                            "end": 2188,
                            "loc": {
                              "start": {
                                "line": 104,
                                "column": 6
                              },
                              "end": {
                                "line": 104,
                                "column": 32
                              }
                            },
                            "id": {
                              "type": "Identifier",
                              "start": 2162,
                              "end": 2167,
                              "loc": {
                                "start": {
                                  "line": 104,
                                  "column": 6
                                },
                                "end": {
                                  "line": 104,
                                  "column": 11
                                },
                                "identifierName": "value"
                              },
                              "name": "value"
                            },
                            "init": {
                              "type": "CallExpression",
                              "start": 2170,
                              "end": 2188,
                              "loc": {
                                "start": {
                                  "line": 104,
                                  "column": 14
                                },
                                "end": {
                                  "line": 104,
                                  "column": 32
                                }
                              },
                              "callee": {
                                "type": "Identifier",
                                "start": 2170,
                                "end": 2182,
                                "loc": {
                                  "start": {
                                    "line": 104,
                                    "column": 14
                                  },
                                  "end": {
                                    "line": 104,
                                    "column": 26
                                  },
                                  "identifierName": "extractValue"
                                },
                                "name": "extractValue"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "start": 2183,
                                  "end": 2187,
                                  "loc": {
                                    "start": {
                                      "line": 104,
                                      "column": 27
                                    },
                                    "end": {
                                      "line": 104,
                                      "column": 31
                                    },
                                    "identifierName": "desc"
                                  },
                                  "name": "desc"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "ReturnStatement",
                        "start": 2192,
                        "end": 2231,
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 2
                          },
                          "end": {
                            "line": 105,
                            "column": 41
                          }
                        },
                        "argument": {
                          "type": "CallExpression",
                          "start": 2199,
                          "end": 2230,
                          "loc": {
                            "start": {
                              "line": 105,
                              "column": 9
                            },
                            "end": {
                              "line": 105,
                              "column": 40
                            }
                          },
                          "callee": {
                            "type": "Identifier",
                            "start": 2199,
                            "end": 2212,
                            "loc": {
                              "start": {
                                "line": 105,
                                "column": 9
                              },
                              "end": {
                                "line": 105,
                                "column": 22
                              },
                              "identifierName": "computedMacro"
                            },
                            "name": "computedMacro"
                          },
                          "arguments": [
                            {
                              "type": "SpreadElement",
                              "start": 2213,
                              "end": 2222,
                              "loc": {
                                "start": {
                                  "line": 105,
                                  "column": 23
                                },
                                "end": {
                                  "line": 105,
                                  "column": 32
                                }
                              },
                              "argument": {
                                "type": "Identifier",
                                "start": 2216,
                                "end": 2222,
                                "loc": {
                                  "start": {
                                    "line": 105,
                                    "column": 26
                                  },
                                  "end": {
                                    "line": 105,
                                    "column": 32
                                  },
                                  "identifierName": "params"
                                },
                                "name": "params"
                              }
                            },
                            {
                              "type": "Identifier",
                              "start": 2224,
                              "end": 2229,
                              "loc": {
                                "start": {
                                  "line": 105,
                                  "column": 34
                                },
                                "end": {
                                  "line": 105,
                                  "column": 39
                                },
                                "identifierName": "value"
                              },
                              "name": "value"
                            }
                          ]
                        }
                      }
                    ],
                    "directives": []
                  }
                }
              ]
            },
            "leadingComments": null
          }
        ],
        "kind": "const",
        "leadingComments": [],
        "name": "_",
        "trailingComments": []
      },
      {
        "type": "Identifier",
        "start": 2237,
        "end": 2261,
        "loc": {
          "start": {
            "line": 108,
            "column": 0
          },
          "end": {
            "line": 108,
            "column": 24
          }
        },
        "declaration": {
          "type": "Identifier",
          "start": 2252,
          "end": 2260,
          "loc": {
            "start": {
              "line": 108,
              "column": 15
            },
            "end": {
              "line": 108,
              "column": 23
            },
            "identifierName": "computed"
          },
          "name": "computed"
        },
        "trailingComments": [],
        "name": "_",
        "leadingComments": []
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 2654,
        "end": 2783,
        "loc": {
          "start": {
            "line": 130,
            "column": 0
          },
          "end": {
            "line": 133,
            "column": 3
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 2661,
          "end": 2783,
          "loc": {
            "start": {
              "line": 130,
              "column": 7
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 2667,
              "end": 2782,
              "loc": {
                "start": {
                  "line": 130,
                  "column": 13
                },
                "end": {
                  "line": 133,
                  "column": 2
                }
              },
              "id": {
                "type": "Identifier",
                "start": 2667,
                "end": 2675,
                "loc": {
                  "start": {
                    "line": 130,
                    "column": 13
                  },
                  "end": {
                    "line": 130,
                    "column": 21
                  },
                  "identifierName": "readOnly"
                },
                "name": "readOnly",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 2678,
                "end": 2782,
                "loc": {
                  "start": {
                    "line": 130,
                    "column": 24
                  },
                  "end": {
                    "line": 133,
                    "column": 2
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 2678,
                  "end": 2687,
                  "loc": {
                    "start": {
                      "line": 130,
                      "column": 24
                    },
                    "end": {
                      "line": 130,
                      "column": 33
                    },
                    "identifierName": "decorator"
                  },
                  "name": "decorator"
                },
                "arguments": [
                  {
                    "type": "FunctionExpression",
                    "start": 2688,
                    "end": 2781,
                    "loc": {
                      "start": {
                        "line": 130,
                        "column": 34
                      },
                      "end": {
                        "line": 133,
                        "column": 1
                      }
                    },
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "start": 2697,
                        "end": 2703,
                        "loc": {
                          "start": {
                            "line": 130,
                            "column": 43
                          },
                          "end": {
                            "line": 130,
                            "column": 49
                          },
                          "identifierName": "target"
                        },
                        "name": "target"
                      },
                      {
                        "type": "Identifier",
                        "start": 2705,
                        "end": 2709,
                        "loc": {
                          "start": {
                            "line": 130,
                            "column": 51
                          },
                          "end": {
                            "line": 130,
                            "column": 55
                          },
                          "identifierName": "name"
                        },
                        "name": "name"
                      },
                      {
                        "type": "Identifier",
                        "start": 2711,
                        "end": 2715,
                        "loc": {
                          "start": {
                            "line": 130,
                            "column": 57
                          },
                          "end": {
                            "line": 130,
                            "column": 61
                          },
                          "identifierName": "desc"
                        },
                        "name": "desc"
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "start": 2717,
                      "end": 2781,
                      "loc": {
                        "start": {
                          "line": 130,
                          "column": 63
                        },
                        "end": {
                          "line": 133,
                          "column": 1
                        }
                      },
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "start": 2721,
                          "end": 2752,
                          "loc": {
                            "start": {
                              "line": 131,
                              "column": 2
                            },
                            "end": {
                              "line": 131,
                              "column": 33
                            }
                          },
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "start": 2725,
                              "end": 2751,
                              "loc": {
                                "start": {
                                  "line": 131,
                                  "column": 6
                                },
                                "end": {
                                  "line": 131,
                                  "column": 32
                                }
                              },
                              "id": {
                                "type": "Identifier",
                                "start": 2725,
                                "end": 2730,
                                "loc": {
                                  "start": {
                                    "line": 131,
                                    "column": 6
                                  },
                                  "end": {
                                    "line": 131,
                                    "column": 11
                                  },
                                  "identifierName": "value"
                                },
                                "name": "value"
                              },
                              "init": {
                                "type": "CallExpression",
                                "start": 2733,
                                "end": 2751,
                                "loc": {
                                  "start": {
                                    "line": 131,
                                    "column": 14
                                  },
                                  "end": {
                                    "line": 131,
                                    "column": 32
                                  }
                                },
                                "callee": {
                                  "type": "Identifier",
                                  "start": 2733,
                                  "end": 2745,
                                  "loc": {
                                    "start": {
                                      "line": 131,
                                      "column": 14
                                    },
                                    "end": {
                                      "line": 131,
                                      "column": 26
                                    },
                                    "identifierName": "extractValue"
                                  },
                                  "name": "extractValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "start": 2746,
                                    "end": 2750,
                                    "loc": {
                                      "start": {
                                        "line": 131,
                                        "column": 27
                                      },
                                      "end": {
                                        "line": 131,
                                        "column": 31
                                      },
                                      "identifierName": "desc"
                                    },
                                    "name": "desc"
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ReturnStatement",
                          "start": 2755,
                          "end": 2779,
                          "loc": {
                            "start": {
                              "line": 132,
                              "column": 2
                            },
                            "end": {
                              "line": 132,
                              "column": 26
                            }
                          },
                          "argument": {
                            "type": "CallExpression",
                            "start": 2762,
                            "end": 2778,
                            "loc": {
                              "start": {
                                "line": 132,
                                "column": 9
                              },
                              "end": {
                                "line": 132,
                                "column": 25
                              }
                            },
                            "callee": {
                              "type": "MemberExpression",
                              "start": 2762,
                              "end": 2776,
                              "loc": {
                                "start": {
                                  "line": 132,
                                  "column": 9
                                },
                                "end": {
                                  "line": 132,
                                  "column": 23
                                }
                              },
                              "object": {
                                "type": "Identifier",
                                "start": 2762,
                                "end": 2767,
                                "loc": {
                                  "start": {
                                    "line": 132,
                                    "column": 9
                                  },
                                  "end": {
                                    "line": 132,
                                    "column": 14
                                  },
                                  "identifierName": "value"
                                },
                                "name": "value"
                              },
                              "property": {
                                "type": "Identifier",
                                "start": 2768,
                                "end": 2776,
                                "loc": {
                                  "start": {
                                    "line": 132,
                                    "column": 15
                                  },
                                  "end": {
                                    "line": 132,
                                    "column": 23
                                  },
                                  "identifierName": "readOnly"
                                },
                                "name": "readOnly"
                              },
                              "computed": false
                            },
                            "arguments": []
                          }
                        }
                      ],
                      "directives": []
                    }
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that modifies a computed property to be read only.\n *\n * Usage:\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed, { readOnly } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @readOnly\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n * @function\n ",
              "start": 2263,
              "end": 2653,
              "loc": {
                "start": {
                  "line": 110,
                  "column": 0
                },
                "end": {
                  "line": 129,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.on](https://emberjs.com/api/#method_on)\n *\n * Triggers the target function on events\n *\n * ```javascript\n * import Ember from 'ember';\n * import { on } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @on('init')\n *   setupStuff() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
              "start": 2785,
              "end": 3223,
              "loc": {
                "start": {
                  "line": 135,
                  "column": 0
                },
                "end": {
                  "line": 154,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that modifies a computed property to be read only.\n *\n * Usage:\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed, { readOnly } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @readOnly\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n * @function\n ",
            "start": 2263,
            "end": 2653,
            "loc": {
              "start": {
                "line": 110,
                "column": 0
              },
              "end": {
                "line": 129,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.on](https://emberjs.com/api/#method_on)\n *\n * Triggers the target function on events\n *\n * ```javascript\n * import Ember from 'ember';\n * import { on } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @on('init')\n *   setupStuff() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
            "start": 2785,
            "end": 3223,
            "loc": {
              "start": {
                "line": 135,
                "column": 0
              },
              "end": {
                "line": 154,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 3224,
        "end": 3315,
        "loc": {
          "start": {
            "line": 155,
            "column": 0
          },
          "end": {
            "line": 155,
            "column": 91
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 3231,
          "end": 3315,
          "loc": {
            "start": {
              "line": 155,
              "column": 7
            },
            "end": {
              "line": 155,
              "column": 91
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 3237,
              "end": 3314,
              "loc": {
                "start": {
                  "line": 155,
                  "column": 13
                },
                "end": {
                  "line": 155,
                  "column": 90
                }
              },
              "id": {
                "type": "Identifier",
                "start": 3237,
                "end": 3239,
                "loc": {
                  "start": {
                    "line": 155,
                    "column": 13
                  },
                  "end": {
                    "line": 155,
                    "column": 15
                  },
                  "identifierName": "on"
                },
                "name": "on",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 3242,
                "end": 3314,
                "loc": {
                  "start": {
                    "line": 155,
                    "column": 18
                  },
                  "end": {
                    "line": 155,
                    "column": 90
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 3242,
                  "end": 3269,
                  "loc": {
                    "start": {
                      "line": 155,
                      "column": 18
                    },
                    "end": {
                      "line": 155,
                      "column": 45
                    },
                    "identifierName": "decoratorWithRequiredParams"
                  },
                  "name": "decoratorWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 3270,
                    "end": 3278,
                    "loc": {
                      "start": {
                        "line": 155,
                        "column": 46
                      },
                      "end": {
                        "line": 155,
                        "column": 54
                      }
                    },
                    "object": {
                      "type": "Identifier",
                      "start": 3270,
                      "end": 3275,
                      "loc": {
                        "start": {
                          "line": 155,
                          "column": 46
                        },
                        "end": {
                          "line": 155,
                          "column": 51
                        },
                        "identifierName": "Ember"
                      },
                      "name": "Ember"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 3276,
                      "end": 3278,
                      "loc": {
                        "start": {
                          "line": 155,
                          "column": 52
                        },
                        "end": {
                          "line": 155,
                          "column": 54
                        },
                        "identifierName": "on"
                      },
                      "name": "on"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 3280,
                    "end": 3313,
                    "loc": {
                      "start": {
                        "line": 155,
                        "column": 56
                      },
                      "end": {
                        "line": 155,
                        "column": 89
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot `on` without event names",
                      "raw": "'Cannot `on` without event names'"
                    },
                    "value": "Cannot `on` without event names"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.on](https://emberjs.com/api/#method_on)\n *\n * Triggers the target function on events\n *\n * ```javascript\n * import Ember from 'ember';\n * import { on } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @on('init')\n *   setupStuff() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
              "start": 2785,
              "end": 3223,
              "loc": {
                "start": {
                  "line": 135,
                  "column": 0
                },
                "end": {
                  "line": 154,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.observer](https://emberjs.com/api/#method_observer)\n *\n * Triggers the target function when the dependent properties have changed\n *\n * ```javascript\n * import Ember from 'ember';\n * import { observes } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @observes('foo')\n *   bar() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
              "start": 3317,
              "end": 3804,
              "loc": {
                "start": {
                  "line": 157,
                  "column": 0
                },
                "end": {
                  "line": 176,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.on](https://emberjs.com/api/#method_on)\n *\n * Triggers the target function on events\n *\n * ```javascript\n * import Ember from 'ember';\n * import { on } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @on('init')\n *   setupStuff() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
            "start": 2785,
            "end": 3223,
            "loc": {
              "start": {
                "line": 135,
                "column": 0
              },
              "end": {
                "line": 154,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.observer](https://emberjs.com/api/#method_observer)\n *\n * Triggers the target function when the dependent properties have changed\n *\n * ```javascript\n * import Ember from 'ember';\n * import { observes } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @observes('foo')\n *   bar() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
            "start": 3317,
            "end": 3804,
            "loc": {
              "start": {
                "line": 157,
                "column": 0
              },
              "end": {
                "line": 176,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 3805,
        "end": 3916,
        "loc": {
          "start": {
            "line": 177,
            "column": 0
          },
          "end": {
            "line": 177,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 3812,
          "end": 3916,
          "loc": {
            "start": {
              "line": 177,
              "column": 7
            },
            "end": {
              "line": 177,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 3818,
              "end": 3915,
              "loc": {
                "start": {
                  "line": 177,
                  "column": 13
                },
                "end": {
                  "line": 177,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 3818,
                "end": 3826,
                "loc": {
                  "start": {
                    "line": 177,
                    "column": 13
                  },
                  "end": {
                    "line": 177,
                    "column": 21
                  },
                  "identifierName": "observes"
                },
                "name": "observes",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 3829,
                "end": 3915,
                "loc": {
                  "start": {
                    "line": 177,
                    "column": 24
                  },
                  "end": {
                    "line": 177,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 3829,
                  "end": 3856,
                  "loc": {
                    "start": {
                      "line": 177,
                      "column": 24
                    },
                    "end": {
                      "line": 177,
                      "column": 51
                    },
                    "identifierName": "decoratorWithRequiredParams"
                  },
                  "name": "decoratorWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 3857,
                    "end": 3871,
                    "loc": {
                      "start": {
                        "line": 177,
                        "column": 52
                      },
                      "end": {
                        "line": 177,
                        "column": 66
                      }
                    },
                    "object": {
                      "type": "Identifier",
                      "start": 3857,
                      "end": 3862,
                      "loc": {
                        "start": {
                          "line": 177,
                          "column": 52
                        },
                        "end": {
                          "line": 177,
                          "column": 57
                        },
                        "identifierName": "Ember"
                      },
                      "name": "Ember"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 3863,
                      "end": 3871,
                      "loc": {
                        "start": {
                          "line": 177,
                          "column": 58
                        },
                        "end": {
                          "line": 177,
                          "column": 66
                        },
                        "identifierName": "observer"
                      },
                      "name": "observer"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 3873,
                    "end": 3914,
                    "loc": {
                      "start": {
                        "line": 177,
                        "column": 68
                      },
                      "end": {
                        "line": 177,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot `observe` without property names",
                      "raw": "'Cannot `observe` without property names'"
                    },
                    "value": "Cannot `observe` without property names"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.observer](https://emberjs.com/api/#method_observer)\n *\n * Triggers the target function when the dependent properties have changed\n *\n * ```javascript\n * import Ember from 'ember';\n * import { observes } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @observes('foo')\n *   bar() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
              "start": 3317,
              "end": 3804,
              "loc": {
                "start": {
                  "line": 157,
                  "column": 0
                },
                "end": {
                  "line": 176,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
              "start": 3918,
              "end": 4545,
              "loc": {
                "start": {
                  "line": 179,
                  "column": 0
                },
                "end": {
                  "line": 201,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.observer](https://emberjs.com/api/#method_observer)\n *\n * Triggers the target function when the dependent properties have changed\n *\n * ```javascript\n * import Ember from 'ember';\n * import { observes } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @observes('foo')\n *   bar() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
            "start": 3317,
            "end": 3804,
            "loc": {
              "start": {
                "line": 157,
                "column": 0
              },
              "end": {
                "line": 176,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
            "start": 3918,
            "end": 4545,
            "loc": {
              "start": {
                "line": 179,
                "column": 0
              },
              "end": {
                "line": 201,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 4546,
        "end": 4666,
        "loc": {
          "start": {
            "line": 202,
            "column": 0
          },
          "end": {
            "line": 202,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 4553,
          "end": 4666,
          "loc": {
            "start": {
              "line": 202,
              "column": 7
            },
            "end": {
              "line": 202,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 4559,
              "end": 4665,
              "loc": {
                "start": {
                  "line": 202,
                  "column": 13
                },
                "end": {
                  "line": 202,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 4559,
                "end": 4564,
                "loc": {
                  "start": {
                    "line": 202,
                    "column": 13
                  },
                  "end": {
                    "line": 202,
                    "column": 18
                  },
                  "identifierName": "alias"
                },
                "name": "alias",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 4567,
                "end": 4665,
                "loc": {
                  "start": {
                    "line": 202,
                    "column": 21
                  },
                  "end": {
                    "line": 202,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 4567,
                  "end": 4602,
                  "loc": {
                    "start": {
                      "line": 202,
                      "column": 21
                    },
                    "end": {
                      "line": 202,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 4603,
                    "end": 4623,
                    "loc": {
                      "start": {
                        "line": 202,
                        "column": 57
                      },
                      "end": {
                        "line": 202,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 4603,
                      "end": 4617,
                      "loc": {
                        "start": {
                          "line": 202,
                          "column": 57
                        },
                        "end": {
                          "line": 202,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 4603,
                        "end": 4608,
                        "loc": {
                          "start": {
                            "line": 202,
                            "column": 57
                          },
                          "end": {
                            "line": 202,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 4609,
                        "end": 4617,
                        "loc": {
                          "start": {
                            "line": 202,
                            "column": 63
                          },
                          "end": {
                            "line": 202,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 4618,
                      "end": 4623,
                      "loc": {
                        "start": {
                          "line": 202,
                          "column": 72
                        },
                        "end": {
                          "line": 202,
                          "column": 77
                        },
                        "identifierName": "alias"
                      },
                      "name": "alias"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 4625,
                    "end": 4664,
                    "loc": {
                      "start": {
                        "line": 202,
                        "column": 79
                      },
                      "end": {
                        "line": 202,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `alias` without parameters",
                      "raw": "'Cannot use `alias` without parameters'"
                    },
                    "value": "Cannot use `alias` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
              "start": 3918,
              "end": 4545,
              "loc": {
                "start": {
                  "line": 179,
                  "column": 0
                },
                "end": {
                  "line": 201,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
              "start": 4668,
              "end": 5241,
              "loc": {
                "start": {
                  "line": 204,
                  "column": 0
                },
                "end": {
                  "line": 225,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
            "start": 3918,
            "end": 4545,
            "loc": {
              "start": {
                "line": 179,
                "column": 0
              },
              "end": {
                "line": 201,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
            "start": 4668,
            "end": 5241,
            "loc": {
              "start": {
                "line": 204,
                "column": 0
              },
              "end": {
                "line": 225,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 5242,
        "end": 5356,
        "loc": {
          "start": {
            "line": 226,
            "column": 0
          },
          "end": {
            "line": 226,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 5249,
          "end": 5356,
          "loc": {
            "start": {
              "line": 226,
              "column": 7
            },
            "end": {
              "line": 226,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 5255,
              "end": 5355,
              "loc": {
                "start": {
                  "line": 226,
                  "column": 13
                },
                "end": {
                  "line": 226,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 5255,
                "end": 5258,
                "loc": {
                  "start": {
                    "line": 226,
                    "column": 13
                  },
                  "end": {
                    "line": 226,
                    "column": 16
                  },
                  "identifierName": "and"
                },
                "name": "and",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 5261,
                "end": 5355,
                "loc": {
                  "start": {
                    "line": 226,
                    "column": 19
                  },
                  "end": {
                    "line": 226,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 5261,
                  "end": 5296,
                  "loc": {
                    "start": {
                      "line": 226,
                      "column": 19
                    },
                    "end": {
                      "line": 226,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 5297,
                    "end": 5315,
                    "loc": {
                      "start": {
                        "line": 226,
                        "column": 55
                      },
                      "end": {
                        "line": 226,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 5297,
                      "end": 5311,
                      "loc": {
                        "start": {
                          "line": 226,
                          "column": 55
                        },
                        "end": {
                          "line": 226,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 5297,
                        "end": 5302,
                        "loc": {
                          "start": {
                            "line": 226,
                            "column": 55
                          },
                          "end": {
                            "line": 226,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 5303,
                        "end": 5311,
                        "loc": {
                          "start": {
                            "line": 226,
                            "column": 61
                          },
                          "end": {
                            "line": 226,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 5312,
                      "end": 5315,
                      "loc": {
                        "start": {
                          "line": 226,
                          "column": 70
                        },
                        "end": {
                          "line": 226,
                          "column": 73
                        },
                        "identifierName": "and"
                      },
                      "name": "and"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 5317,
                    "end": 5354,
                    "loc": {
                      "start": {
                        "line": 226,
                        "column": 75
                      },
                      "end": {
                        "line": 226,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `and` without parameters",
                      "raw": "'Cannot use `and` without parameters'"
                    },
                    "value": "Cannot use `and` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
              "start": 4668,
              "end": 5241,
              "loc": {
                "start": {
                  "line": 204,
                  "column": 0
                },
                "end": {
                  "line": 225,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
              "start": 5358,
              "end": 5889,
              "loc": {
                "start": {
                  "line": 228,
                  "column": 0
                },
                "end": {
                  "line": 247,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
            "start": 4668,
            "end": 5241,
            "loc": {
              "start": {
                "line": 204,
                "column": 0
              },
              "end": {
                "line": 225,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
            "start": 5358,
            "end": 5889,
            "loc": {
              "start": {
                "line": 228,
                "column": 0
              },
              "end": {
                "line": 247,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 5890,
        "end": 6007,
        "loc": {
          "start": {
            "line": 248,
            "column": 0
          },
          "end": {
            "line": 248,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 5897,
          "end": 6007,
          "loc": {
            "start": {
              "line": 248,
              "column": 7
            },
            "end": {
              "line": 248,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 5903,
              "end": 6006,
              "loc": {
                "start": {
                  "line": 248,
                  "column": 13
                },
                "end": {
                  "line": 248,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 5903,
                "end": 5907,
                "loc": {
                  "start": {
                    "line": 248,
                    "column": 13
                  },
                  "end": {
                    "line": 248,
                    "column": 17
                  },
                  "identifierName": "bool"
                },
                "name": "bool",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 5910,
                "end": 6006,
                "loc": {
                  "start": {
                    "line": 248,
                    "column": 20
                  },
                  "end": {
                    "line": 248,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 5910,
                  "end": 5945,
                  "loc": {
                    "start": {
                      "line": 248,
                      "column": 20
                    },
                    "end": {
                      "line": 248,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 5946,
                    "end": 5965,
                    "loc": {
                      "start": {
                        "line": 248,
                        "column": 56
                      },
                      "end": {
                        "line": 248,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 5946,
                      "end": 5960,
                      "loc": {
                        "start": {
                          "line": 248,
                          "column": 56
                        },
                        "end": {
                          "line": 248,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 5946,
                        "end": 5951,
                        "loc": {
                          "start": {
                            "line": 248,
                            "column": 56
                          },
                          "end": {
                            "line": 248,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 5952,
                        "end": 5960,
                        "loc": {
                          "start": {
                            "line": 248,
                            "column": 62
                          },
                          "end": {
                            "line": 248,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 5961,
                      "end": 5965,
                      "loc": {
                        "start": {
                          "line": 248,
                          "column": 71
                        },
                        "end": {
                          "line": 248,
                          "column": 75
                        },
                        "identifierName": "bool"
                      },
                      "name": "bool"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 5967,
                    "end": 6005,
                    "loc": {
                      "start": {
                        "line": 248,
                        "column": 77
                      },
                      "end": {
                        "line": 248,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `bool` without parameters",
                      "raw": "'Cannot use `bool` without parameters'"
                    },
                    "value": "Cannot use `bool` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
              "start": 5358,
              "end": 5889,
              "loc": {
                "start": {
                  "line": 228,
                  "column": 0
                },
                "end": {
                  "line": 247,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
              "start": 6009,
              "end": 6607,
              "loc": {
                "start": {
                  "line": 250,
                  "column": 0
                },
                "end": {
                  "line": 270,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
            "start": 5358,
            "end": 5889,
            "loc": {
              "start": {
                "line": 228,
                "column": 0
              },
              "end": {
                "line": 247,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
            "start": 6009,
            "end": 6607,
            "loc": {
              "start": {
                "line": 250,
                "column": 0
              },
              "end": {
                "line": 270,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 6608,
        "end": 6734,
        "loc": {
          "start": {
            "line": 271,
            "column": 0
          },
          "end": {
            "line": 271,
            "column": 126
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 6615,
          "end": 6734,
          "loc": {
            "start": {
              "line": 271,
              "column": 7
            },
            "end": {
              "line": 271,
              "column": 126
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 6621,
              "end": 6733,
              "loc": {
                "start": {
                  "line": 271,
                  "column": 13
                },
                "end": {
                  "line": 271,
                  "column": 125
                }
              },
              "id": {
                "type": "Identifier",
                "start": 6621,
                "end": 6628,
                "loc": {
                  "start": {
                    "line": 271,
                    "column": 13
                  },
                  "end": {
                    "line": 271,
                    "column": 20
                  },
                  "identifierName": "collect"
                },
                "name": "collect",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 6631,
                "end": 6733,
                "loc": {
                  "start": {
                    "line": 271,
                    "column": 23
                  },
                  "end": {
                    "line": 271,
                    "column": 125
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 6631,
                  "end": 6666,
                  "loc": {
                    "start": {
                      "line": 271,
                      "column": 23
                    },
                    "end": {
                      "line": 271,
                      "column": 58
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 6667,
                    "end": 6689,
                    "loc": {
                      "start": {
                        "line": 271,
                        "column": 59
                      },
                      "end": {
                        "line": 271,
                        "column": 81
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 6667,
                      "end": 6681,
                      "loc": {
                        "start": {
                          "line": 271,
                          "column": 59
                        },
                        "end": {
                          "line": 271,
                          "column": 73
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 6667,
                        "end": 6672,
                        "loc": {
                          "start": {
                            "line": 271,
                            "column": 59
                          },
                          "end": {
                            "line": 271,
                            "column": 64
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 6673,
                        "end": 6681,
                        "loc": {
                          "start": {
                            "line": 271,
                            "column": 65
                          },
                          "end": {
                            "line": 271,
                            "column": 73
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 6682,
                      "end": 6689,
                      "loc": {
                        "start": {
                          "line": 271,
                          "column": 74
                        },
                        "end": {
                          "line": 271,
                          "column": 81
                        },
                        "identifierName": "collect"
                      },
                      "name": "collect"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 6691,
                    "end": 6732,
                    "loc": {
                      "start": {
                        "line": 271,
                        "column": 83
                      },
                      "end": {
                        "line": 271,
                        "column": 124
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `collect` without parameters",
                      "raw": "'Cannot use `collect` without parameters'"
                    },
                    "value": "Cannot use `collect` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
              "start": 6009,
              "end": 6607,
              "loc": {
                "start": {
                  "line": 250,
                  "column": 0
                },
                "end": {
                  "line": 270,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
              "start": 6736,
              "end": 7340,
              "loc": {
                "start": {
                  "line": 273,
                  "column": 0
                },
                "end": {
                  "line": 292,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
            "start": 6009,
            "end": 6607,
            "loc": {
              "start": {
                "line": 250,
                "column": 0
              },
              "end": {
                "line": 270,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
            "start": 6736,
            "end": 7340,
            "loc": {
              "start": {
                "line": 273,
                "column": 0
              },
              "end": {
                "line": 292,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 7341,
        "end": 7461,
        "loc": {
          "start": {
            "line": 293,
            "column": 0
          },
          "end": {
            "line": 293,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 7348,
          "end": 7461,
          "loc": {
            "start": {
              "line": 293,
              "column": 7
            },
            "end": {
              "line": 293,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 7354,
              "end": 7460,
              "loc": {
                "start": {
                  "line": 293,
                  "column": 13
                },
                "end": {
                  "line": 293,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 7354,
                "end": 7359,
                "loc": {
                  "start": {
                    "line": 293,
                    "column": 13
                  },
                  "end": {
                    "line": 293,
                    "column": 18
                  },
                  "identifierName": "empty"
                },
                "name": "empty",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 7362,
                "end": 7460,
                "loc": {
                  "start": {
                    "line": 293,
                    "column": 21
                  },
                  "end": {
                    "line": 293,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 7362,
                  "end": 7397,
                  "loc": {
                    "start": {
                      "line": 293,
                      "column": 21
                    },
                    "end": {
                      "line": 293,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 7398,
                    "end": 7418,
                    "loc": {
                      "start": {
                        "line": 293,
                        "column": 57
                      },
                      "end": {
                        "line": 293,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 7398,
                      "end": 7412,
                      "loc": {
                        "start": {
                          "line": 293,
                          "column": 57
                        },
                        "end": {
                          "line": 293,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 7398,
                        "end": 7403,
                        "loc": {
                          "start": {
                            "line": 293,
                            "column": 57
                          },
                          "end": {
                            "line": 293,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 7404,
                        "end": 7412,
                        "loc": {
                          "start": {
                            "line": 293,
                            "column": 63
                          },
                          "end": {
                            "line": 293,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 7413,
                      "end": 7418,
                      "loc": {
                        "start": {
                          "line": 293,
                          "column": 72
                        },
                        "end": {
                          "line": 293,
                          "column": 77
                        },
                        "identifierName": "empty"
                      },
                      "name": "empty"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 7420,
                    "end": 7459,
                    "loc": {
                      "start": {
                        "line": 293,
                        "column": 79
                      },
                      "end": {
                        "line": 293,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `empty` without parameters",
                      "raw": "'Cannot use `empty` without parameters'"
                    },
                    "value": "Cannot use `empty` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
              "start": 6736,
              "end": 7340,
              "loc": {
                "start": {
                  "line": 273,
                  "column": 0
                },
                "end": {
                  "line": 292,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
              "start": 7463,
              "end": 8041,
              "loc": {
                "start": {
                  "line": 295,
                  "column": 0
                },
                "end": {
                  "line": 313,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
            "start": 6736,
            "end": 7340,
            "loc": {
              "start": {
                "line": 273,
                "column": 0
              },
              "end": {
                "line": 292,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
            "start": 7463,
            "end": 8041,
            "loc": {
              "start": {
                "line": 295,
                "column": 0
              },
              "end": {
                "line": 313,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 8042,
        "end": 8162,
        "loc": {
          "start": {
            "line": 314,
            "column": 0
          },
          "end": {
            "line": 314,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 8049,
          "end": 8162,
          "loc": {
            "start": {
              "line": 314,
              "column": 7
            },
            "end": {
              "line": 314,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 8055,
              "end": 8161,
              "loc": {
                "start": {
                  "line": 314,
                  "column": 13
                },
                "end": {
                  "line": 314,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 8055,
                "end": 8060,
                "loc": {
                  "start": {
                    "line": 314,
                    "column": 13
                  },
                  "end": {
                    "line": 314,
                    "column": 18
                  },
                  "identifierName": "equal"
                },
                "name": "equal",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 8063,
                "end": 8161,
                "loc": {
                  "start": {
                    "line": 314,
                    "column": 21
                  },
                  "end": {
                    "line": 314,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 8063,
                  "end": 8098,
                  "loc": {
                    "start": {
                      "line": 314,
                      "column": 21
                    },
                    "end": {
                      "line": 314,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 8099,
                    "end": 8119,
                    "loc": {
                      "start": {
                        "line": 314,
                        "column": 57
                      },
                      "end": {
                        "line": 314,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 8099,
                      "end": 8113,
                      "loc": {
                        "start": {
                          "line": 314,
                          "column": 57
                        },
                        "end": {
                          "line": 314,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 8099,
                        "end": 8104,
                        "loc": {
                          "start": {
                            "line": 314,
                            "column": 57
                          },
                          "end": {
                            "line": 314,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 8105,
                        "end": 8113,
                        "loc": {
                          "start": {
                            "line": 314,
                            "column": 63
                          },
                          "end": {
                            "line": 314,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 8114,
                      "end": 8119,
                      "loc": {
                        "start": {
                          "line": 314,
                          "column": 72
                        },
                        "end": {
                          "line": 314,
                          "column": 77
                        },
                        "identifierName": "equal"
                      },
                      "name": "equal"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 8121,
                    "end": 8160,
                    "loc": {
                      "start": {
                        "line": 314,
                        "column": 79
                      },
                      "end": {
                        "line": 314,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `equal` without parameters",
                      "raw": "'Cannot use `equal` without parameters'"
                    },
                    "value": "Cannot use `equal` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
              "start": 7463,
              "end": 8041,
              "loc": {
                "start": {
                  "line": 295,
                  "column": 0
                },
                "end": {
                  "line": 313,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
              "start": 8164,
              "end": 9025,
              "loc": {
                "start": {
                  "line": 316,
                  "column": 0
                },
                "end": {
                  "line": 341,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
            "start": 7463,
            "end": 8041,
            "loc": {
              "start": {
                "line": 295,
                "column": 0
              },
              "end": {
                "line": 313,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
            "start": 8164,
            "end": 9025,
            "loc": {
              "start": {
                "line": 316,
                "column": 0
              },
              "end": {
                "line": 341,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 9026,
        "end": 9149,
        "loc": {
          "start": {
            "line": 342,
            "column": 0
          },
          "end": {
            "line": 342,
            "column": 123
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 9033,
          "end": 9149,
          "loc": {
            "start": {
              "line": 342,
              "column": 7
            },
            "end": {
              "line": 342,
              "column": 123
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 9039,
              "end": 9148,
              "loc": {
                "start": {
                  "line": 342,
                  "column": 13
                },
                "end": {
                  "line": 342,
                  "column": 122
                }
              },
              "id": {
                "type": "Identifier",
                "start": 9039,
                "end": 9045,
                "loc": {
                  "start": {
                    "line": 342,
                    "column": 13
                  },
                  "end": {
                    "line": 342,
                    "column": 19
                  },
                  "identifierName": "filter"
                },
                "name": "filter",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 9048,
                "end": 9148,
                "loc": {
                  "start": {
                    "line": 342,
                    "column": 22
                  },
                  "end": {
                    "line": 342,
                    "column": 122
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 9048,
                  "end": 9083,
                  "loc": {
                    "start": {
                      "line": 342,
                      "column": 22
                    },
                    "end": {
                      "line": 342,
                      "column": 57
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 9084,
                    "end": 9105,
                    "loc": {
                      "start": {
                        "line": 342,
                        "column": 58
                      },
                      "end": {
                        "line": 342,
                        "column": 79
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 9084,
                      "end": 9098,
                      "loc": {
                        "start": {
                          "line": 342,
                          "column": 58
                        },
                        "end": {
                          "line": 342,
                          "column": 72
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 9084,
                        "end": 9089,
                        "loc": {
                          "start": {
                            "line": 342,
                            "column": 58
                          },
                          "end": {
                            "line": 342,
                            "column": 63
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 9090,
                        "end": 9098,
                        "loc": {
                          "start": {
                            "line": 342,
                            "column": 64
                          },
                          "end": {
                            "line": 342,
                            "column": 72
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 9099,
                      "end": 9105,
                      "loc": {
                        "start": {
                          "line": 342,
                          "column": 73
                        },
                        "end": {
                          "line": 342,
                          "column": 79
                        },
                        "identifierName": "filter"
                      },
                      "name": "filter"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 9107,
                    "end": 9147,
                    "loc": {
                      "start": {
                        "line": 342,
                        "column": 81
                      },
                      "end": {
                        "line": 342,
                        "column": 121
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `filter` without parameters",
                      "raw": "'Cannot use `filter` without parameters'"
                    },
                    "value": "Cannot use `filter` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
              "start": 8164,
              "end": 9025,
              "loc": {
                "start": {
                  "line": 316,
                  "column": 0
                },
                "end": {
                  "line": 341,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
              "start": 9151,
              "end": 9959,
              "loc": {
                "start": {
                  "line": 344,
                  "column": 0
                },
                "end": {
                  "line": 368,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
            "start": 8164,
            "end": 9025,
            "loc": {
              "start": {
                "line": 316,
                "column": 0
              },
              "end": {
                "line": 341,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
            "start": 9151,
            "end": 9959,
            "loc": {
              "start": {
                "line": 344,
                "column": 0
              },
              "end": {
                "line": 368,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 9960,
        "end": 10089,
        "loc": {
          "start": {
            "line": 369,
            "column": 0
          },
          "end": {
            "line": 369,
            "column": 129
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 9967,
          "end": 10089,
          "loc": {
            "start": {
              "line": 369,
              "column": 7
            },
            "end": {
              "line": 369,
              "column": 129
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 9973,
              "end": 10088,
              "loc": {
                "start": {
                  "line": 369,
                  "column": 13
                },
                "end": {
                  "line": 369,
                  "column": 128
                }
              },
              "id": {
                "type": "Identifier",
                "start": 9973,
                "end": 9981,
                "loc": {
                  "start": {
                    "line": 369,
                    "column": 13
                  },
                  "end": {
                    "line": 369,
                    "column": 21
                  },
                  "identifierName": "filterBy"
                },
                "name": "filterBy",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 9984,
                "end": 10088,
                "loc": {
                  "start": {
                    "line": 369,
                    "column": 24
                  },
                  "end": {
                    "line": 369,
                    "column": 128
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 9984,
                  "end": 10019,
                  "loc": {
                    "start": {
                      "line": 369,
                      "column": 24
                    },
                    "end": {
                      "line": 369,
                      "column": 59
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 10020,
                    "end": 10043,
                    "loc": {
                      "start": {
                        "line": 369,
                        "column": 60
                      },
                      "end": {
                        "line": 369,
                        "column": 83
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 10020,
                      "end": 10034,
                      "loc": {
                        "start": {
                          "line": 369,
                          "column": 60
                        },
                        "end": {
                          "line": 369,
                          "column": 74
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 10020,
                        "end": 10025,
                        "loc": {
                          "start": {
                            "line": 369,
                            "column": 60
                          },
                          "end": {
                            "line": 369,
                            "column": 65
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 10026,
                        "end": 10034,
                        "loc": {
                          "start": {
                            "line": 369,
                            "column": 66
                          },
                          "end": {
                            "line": 369,
                            "column": 74
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 10035,
                      "end": 10043,
                      "loc": {
                        "start": {
                          "line": 369,
                          "column": 75
                        },
                        "end": {
                          "line": 369,
                          "column": 83
                        },
                        "identifierName": "filterBy"
                      },
                      "name": "filterBy"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 10045,
                    "end": 10087,
                    "loc": {
                      "start": {
                        "line": 369,
                        "column": 85
                      },
                      "end": {
                        "line": 369,
                        "column": 127
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `filterBy` without parameters",
                      "raw": "'Cannot use `filterBy` without parameters'"
                    },
                    "value": "Cannot use `filterBy` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
              "start": 9151,
              "end": 9959,
              "loc": {
                "start": {
                  "line": 344,
                  "column": 0
                },
                "end": {
                  "line": 368,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 10091,
              "end": 10687,
              "loc": {
                "start": {
                  "line": 371,
                  "column": 0
                },
                "end": {
                  "line": 391,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
            "start": 9151,
            "end": 9959,
            "loc": {
              "start": {
                "line": 344,
                "column": 0
              },
              "end": {
                "line": 368,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 10091,
            "end": 10687,
            "loc": {
              "start": {
                "line": 371,
                "column": 0
              },
              "end": {
                "line": 391,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 10688,
        "end": 10799,
        "loc": {
          "start": {
            "line": 392,
            "column": 0
          },
          "end": {
            "line": 392,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 10695,
          "end": 10799,
          "loc": {
            "start": {
              "line": 392,
              "column": 7
            },
            "end": {
              "line": 392,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 10701,
              "end": 10798,
              "loc": {
                "start": {
                  "line": 392,
                  "column": 13
                },
                "end": {
                  "line": 392,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 10701,
                "end": 10703,
                "loc": {
                  "start": {
                    "line": 392,
                    "column": 13
                  },
                  "end": {
                    "line": 392,
                    "column": 15
                  },
                  "identifierName": "gt"
                },
                "name": "gt",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 10706,
                "end": 10798,
                "loc": {
                  "start": {
                    "line": 392,
                    "column": 18
                  },
                  "end": {
                    "line": 392,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 10706,
                  "end": 10741,
                  "loc": {
                    "start": {
                      "line": 392,
                      "column": 18
                    },
                    "end": {
                      "line": 392,
                      "column": 53
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 10742,
                    "end": 10759,
                    "loc": {
                      "start": {
                        "line": 392,
                        "column": 54
                      },
                      "end": {
                        "line": 392,
                        "column": 71
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 10742,
                      "end": 10756,
                      "loc": {
                        "start": {
                          "line": 392,
                          "column": 54
                        },
                        "end": {
                          "line": 392,
                          "column": 68
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 10742,
                        "end": 10747,
                        "loc": {
                          "start": {
                            "line": 392,
                            "column": 54
                          },
                          "end": {
                            "line": 392,
                            "column": 59
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 10748,
                        "end": 10756,
                        "loc": {
                          "start": {
                            "line": 392,
                            "column": 60
                          },
                          "end": {
                            "line": 392,
                            "column": 68
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 10757,
                      "end": 10759,
                      "loc": {
                        "start": {
                          "line": 392,
                          "column": 69
                        },
                        "end": {
                          "line": 392,
                          "column": 71
                        },
                        "identifierName": "gt"
                      },
                      "name": "gt"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 10761,
                    "end": 10797,
                    "loc": {
                      "start": {
                        "line": 392,
                        "column": 73
                      },
                      "end": {
                        "line": 392,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `gt` without parameters",
                      "raw": "'Cannot use `gt` without parameters'"
                    },
                    "value": "Cannot use `gt` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 10091,
              "end": 10687,
              "loc": {
                "start": {
                  "line": 371,
                  "column": 0
                },
                "end": {
                  "line": 391,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 10801,
              "end": 11425,
              "loc": {
                "start": {
                  "line": 394,
                  "column": 0
                },
                "end": {
                  "line": 414,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 10091,
            "end": 10687,
            "loc": {
              "start": {
                "line": 371,
                "column": 0
              },
              "end": {
                "line": 391,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 10801,
            "end": 11425,
            "loc": {
              "start": {
                "line": 394,
                "column": 0
              },
              "end": {
                "line": 414,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 11426,
        "end": 11540,
        "loc": {
          "start": {
            "line": 415,
            "column": 0
          },
          "end": {
            "line": 415,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 11433,
          "end": 11540,
          "loc": {
            "start": {
              "line": 415,
              "column": 7
            },
            "end": {
              "line": 415,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 11439,
              "end": 11539,
              "loc": {
                "start": {
                  "line": 415,
                  "column": 13
                },
                "end": {
                  "line": 415,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 11439,
                "end": 11442,
                "loc": {
                  "start": {
                    "line": 415,
                    "column": 13
                  },
                  "end": {
                    "line": 415,
                    "column": 16
                  },
                  "identifierName": "gte"
                },
                "name": "gte",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 11445,
                "end": 11539,
                "loc": {
                  "start": {
                    "line": 415,
                    "column": 19
                  },
                  "end": {
                    "line": 415,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 11445,
                  "end": 11480,
                  "loc": {
                    "start": {
                      "line": 415,
                      "column": 19
                    },
                    "end": {
                      "line": 415,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 11481,
                    "end": 11499,
                    "loc": {
                      "start": {
                        "line": 415,
                        "column": 55
                      },
                      "end": {
                        "line": 415,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 11481,
                      "end": 11495,
                      "loc": {
                        "start": {
                          "line": 415,
                          "column": 55
                        },
                        "end": {
                          "line": 415,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 11481,
                        "end": 11486,
                        "loc": {
                          "start": {
                            "line": 415,
                            "column": 55
                          },
                          "end": {
                            "line": 415,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 11487,
                        "end": 11495,
                        "loc": {
                          "start": {
                            "line": 415,
                            "column": 61
                          },
                          "end": {
                            "line": 415,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 11496,
                      "end": 11499,
                      "loc": {
                        "start": {
                          "line": 415,
                          "column": 70
                        },
                        "end": {
                          "line": 415,
                          "column": 73
                        },
                        "identifierName": "gte"
                      },
                      "name": "gte"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 11501,
                    "end": 11538,
                    "loc": {
                      "start": {
                        "line": 415,
                        "column": 75
                      },
                      "end": {
                        "line": 415,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `gte` without parameters",
                      "raw": "'Cannot use `gte` without parameters'"
                    },
                    "value": "Cannot use `gte` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 10801,
              "end": 11425,
              "loc": {
                "start": {
                  "line": 394,
                  "column": 0
                },
                "end": {
                  "line": 414,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
              "start": 11542,
              "end": 12214,
              "loc": {
                "start": {
                  "line": 417,
                  "column": 0
                },
                "end": {
                  "line": 437,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 10801,
            "end": 11425,
            "loc": {
              "start": {
                "line": 394,
                "column": 0
              },
              "end": {
                "line": 414,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
            "start": 11542,
            "end": 12214,
            "loc": {
              "start": {
                "line": 417,
                "column": 0
              },
              "end": {
                "line": 437,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 12215,
        "end": 12347,
        "loc": {
          "start": {
            "line": 438,
            "column": 0
          },
          "end": {
            "line": 438,
            "column": 132
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 12222,
          "end": 12347,
          "loc": {
            "start": {
              "line": 438,
              "column": 7
            },
            "end": {
              "line": 438,
              "column": 132
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 12228,
              "end": 12346,
              "loc": {
                "start": {
                  "line": 438,
                  "column": 13
                },
                "end": {
                  "line": 438,
                  "column": 131
                }
              },
              "id": {
                "type": "Identifier",
                "start": 12228,
                "end": 12237,
                "loc": {
                  "start": {
                    "line": 438,
                    "column": 13
                  },
                  "end": {
                    "line": 438,
                    "column": 22
                  },
                  "identifierName": "intersect"
                },
                "name": "intersect",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 12240,
                "end": 12346,
                "loc": {
                  "start": {
                    "line": 438,
                    "column": 25
                  },
                  "end": {
                    "line": 438,
                    "column": 131
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 12240,
                  "end": 12275,
                  "loc": {
                    "start": {
                      "line": 438,
                      "column": 25
                    },
                    "end": {
                      "line": 438,
                      "column": 60
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 12276,
                    "end": 12300,
                    "loc": {
                      "start": {
                        "line": 438,
                        "column": 61
                      },
                      "end": {
                        "line": 438,
                        "column": 85
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 12276,
                      "end": 12290,
                      "loc": {
                        "start": {
                          "line": 438,
                          "column": 61
                        },
                        "end": {
                          "line": 438,
                          "column": 75
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 12276,
                        "end": 12281,
                        "loc": {
                          "start": {
                            "line": 438,
                            "column": 61
                          },
                          "end": {
                            "line": 438,
                            "column": 66
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 12282,
                        "end": 12290,
                        "loc": {
                          "start": {
                            "line": 438,
                            "column": 67
                          },
                          "end": {
                            "line": 438,
                            "column": 75
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 12291,
                      "end": 12300,
                      "loc": {
                        "start": {
                          "line": 438,
                          "column": 76
                        },
                        "end": {
                          "line": 438,
                          "column": 85
                        },
                        "identifierName": "intersect"
                      },
                      "name": "intersect"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 12302,
                    "end": 12345,
                    "loc": {
                      "start": {
                        "line": 438,
                        "column": 87
                      },
                      "end": {
                        "line": 438,
                        "column": 130
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `intersect` without parameters",
                      "raw": "'Cannot use `intersect` without parameters'"
                    },
                    "value": "Cannot use `intersect` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
              "start": 11542,
              "end": 12214,
              "loc": {
                "start": {
                  "line": 417,
                  "column": 0
                },
                "end": {
                  "line": 437,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 12349,
              "end": 12941,
              "loc": {
                "start": {
                  "line": 440,
                  "column": 0
                },
                "end": {
                  "line": 460,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
            "start": 11542,
            "end": 12214,
            "loc": {
              "start": {
                "line": 417,
                "column": 0
              },
              "end": {
                "line": 437,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 12349,
            "end": 12941,
            "loc": {
              "start": {
                "line": 440,
                "column": 0
              },
              "end": {
                "line": 460,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 12942,
        "end": 13053,
        "loc": {
          "start": {
            "line": 461,
            "column": 0
          },
          "end": {
            "line": 461,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 12949,
          "end": 13053,
          "loc": {
            "start": {
              "line": 461,
              "column": 7
            },
            "end": {
              "line": 461,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 12955,
              "end": 13052,
              "loc": {
                "start": {
                  "line": 461,
                  "column": 13
                },
                "end": {
                  "line": 461,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 12955,
                "end": 12957,
                "loc": {
                  "start": {
                    "line": 461,
                    "column": 13
                  },
                  "end": {
                    "line": 461,
                    "column": 15
                  },
                  "identifierName": "lt"
                },
                "name": "lt",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 12960,
                "end": 13052,
                "loc": {
                  "start": {
                    "line": 461,
                    "column": 18
                  },
                  "end": {
                    "line": 461,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 12960,
                  "end": 12995,
                  "loc": {
                    "start": {
                      "line": 461,
                      "column": 18
                    },
                    "end": {
                      "line": 461,
                      "column": 53
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 12996,
                    "end": 13013,
                    "loc": {
                      "start": {
                        "line": 461,
                        "column": 54
                      },
                      "end": {
                        "line": 461,
                        "column": 71
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 12996,
                      "end": 13010,
                      "loc": {
                        "start": {
                          "line": 461,
                          "column": 54
                        },
                        "end": {
                          "line": 461,
                          "column": 68
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 12996,
                        "end": 13001,
                        "loc": {
                          "start": {
                            "line": 461,
                            "column": 54
                          },
                          "end": {
                            "line": 461,
                            "column": 59
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 13002,
                        "end": 13010,
                        "loc": {
                          "start": {
                            "line": 461,
                            "column": 60
                          },
                          "end": {
                            "line": 461,
                            "column": 68
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 13011,
                      "end": 13013,
                      "loc": {
                        "start": {
                          "line": 461,
                          "column": 69
                        },
                        "end": {
                          "line": 461,
                          "column": 71
                        },
                        "identifierName": "lt"
                      },
                      "name": "lt"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 13015,
                    "end": 13051,
                    "loc": {
                      "start": {
                        "line": 461,
                        "column": 73
                      },
                      "end": {
                        "line": 461,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `lt` without parameters",
                      "raw": "'Cannot use `lt` without parameters'"
                    },
                    "value": "Cannot use `lt` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 12349,
              "end": 12941,
              "loc": {
                "start": {
                  "line": 440,
                  "column": 0
                },
                "end": {
                  "line": 460,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 13055,
              "end": 13676,
              "loc": {
                "start": {
                  "line": 463,
                  "column": 0
                },
                "end": {
                  "line": 483,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 12349,
            "end": 12941,
            "loc": {
              "start": {
                "line": 440,
                "column": 0
              },
              "end": {
                "line": 460,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 13055,
            "end": 13676,
            "loc": {
              "start": {
                "line": 463,
                "column": 0
              },
              "end": {
                "line": 483,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 13677,
        "end": 13791,
        "loc": {
          "start": {
            "line": 484,
            "column": 0
          },
          "end": {
            "line": 484,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 13684,
          "end": 13791,
          "loc": {
            "start": {
              "line": 484,
              "column": 7
            },
            "end": {
              "line": 484,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 13690,
              "end": 13790,
              "loc": {
                "start": {
                  "line": 484,
                  "column": 13
                },
                "end": {
                  "line": 484,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 13690,
                "end": 13693,
                "loc": {
                  "start": {
                    "line": 484,
                    "column": 13
                  },
                  "end": {
                    "line": 484,
                    "column": 16
                  },
                  "identifierName": "lte"
                },
                "name": "lte",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 13696,
                "end": 13790,
                "loc": {
                  "start": {
                    "line": 484,
                    "column": 19
                  },
                  "end": {
                    "line": 484,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 13696,
                  "end": 13731,
                  "loc": {
                    "start": {
                      "line": 484,
                      "column": 19
                    },
                    "end": {
                      "line": 484,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 13732,
                    "end": 13750,
                    "loc": {
                      "start": {
                        "line": 484,
                        "column": 55
                      },
                      "end": {
                        "line": 484,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 13732,
                      "end": 13746,
                      "loc": {
                        "start": {
                          "line": 484,
                          "column": 55
                        },
                        "end": {
                          "line": 484,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 13732,
                        "end": 13737,
                        "loc": {
                          "start": {
                            "line": 484,
                            "column": 55
                          },
                          "end": {
                            "line": 484,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 13738,
                        "end": 13746,
                        "loc": {
                          "start": {
                            "line": 484,
                            "column": 61
                          },
                          "end": {
                            "line": 484,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 13747,
                      "end": 13750,
                      "loc": {
                        "start": {
                          "line": 484,
                          "column": 70
                        },
                        "end": {
                          "line": 484,
                          "column": 73
                        },
                        "identifierName": "lte"
                      },
                      "name": "lte"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 13752,
                    "end": 13789,
                    "loc": {
                      "start": {
                        "line": 484,
                        "column": 75
                      },
                      "end": {
                        "line": 484,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `lte` without parameters",
                      "raw": "'Cannot use `lte` without parameters'"
                    },
                    "value": "Cannot use `lte` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 13055,
              "end": 13676,
              "loc": {
                "start": {
                  "line": 463,
                  "column": 0
                },
                "end": {
                  "line": 483,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
              "start": 13793,
              "end": 14497,
              "loc": {
                "start": {
                  "line": 486,
                  "column": 0
                },
                "end": {
                  "line": 507,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 13055,
            "end": 13676,
            "loc": {
              "start": {
                "line": 463,
                "column": 0
              },
              "end": {
                "line": 483,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
            "start": 13793,
            "end": 14497,
            "loc": {
              "start": {
                "line": 486,
                "column": 0
              },
              "end": {
                "line": 507,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 14498,
        "end": 14612,
        "loc": {
          "start": {
            "line": 508,
            "column": 0
          },
          "end": {
            "line": 508,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 14505,
          "end": 14612,
          "loc": {
            "start": {
              "line": 508,
              "column": 7
            },
            "end": {
              "line": 508,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 14511,
              "end": 14611,
              "loc": {
                "start": {
                  "line": 508,
                  "column": 13
                },
                "end": {
                  "line": 508,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 14511,
                "end": 14514,
                "loc": {
                  "start": {
                    "line": 508,
                    "column": 13
                  },
                  "end": {
                    "line": 508,
                    "column": 16
                  },
                  "identifierName": "map"
                },
                "name": "map",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 14517,
                "end": 14611,
                "loc": {
                  "start": {
                    "line": 508,
                    "column": 19
                  },
                  "end": {
                    "line": 508,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 14517,
                  "end": 14552,
                  "loc": {
                    "start": {
                      "line": 508,
                      "column": 19
                    },
                    "end": {
                      "line": 508,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 14553,
                    "end": 14571,
                    "loc": {
                      "start": {
                        "line": 508,
                        "column": 55
                      },
                      "end": {
                        "line": 508,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 14553,
                      "end": 14567,
                      "loc": {
                        "start": {
                          "line": 508,
                          "column": 55
                        },
                        "end": {
                          "line": 508,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 14553,
                        "end": 14558,
                        "loc": {
                          "start": {
                            "line": 508,
                            "column": 55
                          },
                          "end": {
                            "line": 508,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 14559,
                        "end": 14567,
                        "loc": {
                          "start": {
                            "line": 508,
                            "column": 61
                          },
                          "end": {
                            "line": 508,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 14568,
                      "end": 14571,
                      "loc": {
                        "start": {
                          "line": 508,
                          "column": 70
                        },
                        "end": {
                          "line": 508,
                          "column": 73
                        },
                        "identifierName": "map"
                      },
                      "name": "map"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 14573,
                    "end": 14610,
                    "loc": {
                      "start": {
                        "line": 508,
                        "column": 75
                      },
                      "end": {
                        "line": 508,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `map` without parameters",
                      "raw": "'Cannot use `map` without parameters'"
                    },
                    "value": "Cannot use `map` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
              "start": 13793,
              "end": 14497,
              "loc": {
                "start": {
                  "line": 486,
                  "column": 0
                },
                "end": {
                  "line": 507,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
              "start": 14614,
              "end": 15282,
              "loc": {
                "start": {
                  "line": 510,
                  "column": 0
                },
                "end": {
                  "line": 533,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
            "start": 13793,
            "end": 14497,
            "loc": {
              "start": {
                "line": 486,
                "column": 0
              },
              "end": {
                "line": 507,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
            "start": 14614,
            "end": 15282,
            "loc": {
              "start": {
                "line": 510,
                "column": 0
              },
              "end": {
                "line": 533,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 15283,
        "end": 15403,
        "loc": {
          "start": {
            "line": 534,
            "column": 0
          },
          "end": {
            "line": 534,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 15290,
          "end": 15403,
          "loc": {
            "start": {
              "line": 534,
              "column": 7
            },
            "end": {
              "line": 534,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 15296,
              "end": 15402,
              "loc": {
                "start": {
                  "line": 534,
                  "column": 13
                },
                "end": {
                  "line": 534,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 15296,
                "end": 15301,
                "loc": {
                  "start": {
                    "line": 534,
                    "column": 13
                  },
                  "end": {
                    "line": 534,
                    "column": 18
                  },
                  "identifierName": "mapBy"
                },
                "name": "mapBy",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 15304,
                "end": 15402,
                "loc": {
                  "start": {
                    "line": 534,
                    "column": 21
                  },
                  "end": {
                    "line": 534,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 15304,
                  "end": 15339,
                  "loc": {
                    "start": {
                      "line": 534,
                      "column": 21
                    },
                    "end": {
                      "line": 534,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 15340,
                    "end": 15360,
                    "loc": {
                      "start": {
                        "line": 534,
                        "column": 57
                      },
                      "end": {
                        "line": 534,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 15340,
                      "end": 15354,
                      "loc": {
                        "start": {
                          "line": 534,
                          "column": 57
                        },
                        "end": {
                          "line": 534,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 15340,
                        "end": 15345,
                        "loc": {
                          "start": {
                            "line": 534,
                            "column": 57
                          },
                          "end": {
                            "line": 534,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 15346,
                        "end": 15354,
                        "loc": {
                          "start": {
                            "line": 534,
                            "column": 63
                          },
                          "end": {
                            "line": 534,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 15355,
                      "end": 15360,
                      "loc": {
                        "start": {
                          "line": 534,
                          "column": 72
                        },
                        "end": {
                          "line": 534,
                          "column": 77
                        },
                        "identifierName": "mapBy"
                      },
                      "name": "mapBy"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 15362,
                    "end": 15401,
                    "loc": {
                      "start": {
                        "line": 534,
                        "column": 79
                      },
                      "end": {
                        "line": 534,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `mapBy` without parameters",
                      "raw": "'Cannot use `mapBy` without parameters'"
                    },
                    "value": "Cannot use `mapBy` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
              "start": 14614,
              "end": 15282,
              "loc": {
                "start": {
                  "line": 510,
                  "column": 0
                },
                "end": {
                  "line": 533,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
              "start": 15405,
              "end": 16098,
              "loc": {
                "start": {
                  "line": 536,
                  "column": 0
                },
                "end": {
                  "line": 557,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
            "start": 14614,
            "end": 15282,
            "loc": {
              "start": {
                "line": 510,
                "column": 0
              },
              "end": {
                "line": 533,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
            "start": 15405,
            "end": 16098,
            "loc": {
              "start": {
                "line": 536,
                "column": 0
              },
              "end": {
                "line": 557,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 16099,
        "end": 16219,
        "loc": {
          "start": {
            "line": 558,
            "column": 0
          },
          "end": {
            "line": 558,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 16106,
          "end": 16219,
          "loc": {
            "start": {
              "line": 558,
              "column": 7
            },
            "end": {
              "line": 558,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 16112,
              "end": 16218,
              "loc": {
                "start": {
                  "line": 558,
                  "column": 13
                },
                "end": {
                  "line": 558,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 16112,
                "end": 16117,
                "loc": {
                  "start": {
                    "line": 558,
                    "column": 13
                  },
                  "end": {
                    "line": 558,
                    "column": 18
                  },
                  "identifierName": "match"
                },
                "name": "match",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 16120,
                "end": 16218,
                "loc": {
                  "start": {
                    "line": 558,
                    "column": 21
                  },
                  "end": {
                    "line": 558,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 16120,
                  "end": 16155,
                  "loc": {
                    "start": {
                      "line": 558,
                      "column": 21
                    },
                    "end": {
                      "line": 558,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 16156,
                    "end": 16176,
                    "loc": {
                      "start": {
                        "line": 558,
                        "column": 57
                      },
                      "end": {
                        "line": 558,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 16156,
                      "end": 16170,
                      "loc": {
                        "start": {
                          "line": 558,
                          "column": 57
                        },
                        "end": {
                          "line": 558,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 16156,
                        "end": 16161,
                        "loc": {
                          "start": {
                            "line": 558,
                            "column": 57
                          },
                          "end": {
                            "line": 558,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 16162,
                        "end": 16170,
                        "loc": {
                          "start": {
                            "line": 558,
                            "column": 63
                          },
                          "end": {
                            "line": 558,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 16171,
                      "end": 16176,
                      "loc": {
                        "start": {
                          "line": 558,
                          "column": 72
                        },
                        "end": {
                          "line": 558,
                          "column": 77
                        },
                        "identifierName": "match"
                      },
                      "name": "match"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 16178,
                    "end": 16217,
                    "loc": {
                      "start": {
                        "line": 558,
                        "column": 79
                      },
                      "end": {
                        "line": 558,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `match` without parameters",
                      "raw": "'Cannot use `match` without parameters'"
                    },
                    "value": "Cannot use `match` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
              "start": 15405,
              "end": 16098,
              "loc": {
                "start": {
                  "line": 536,
                  "column": 0
                },
                "end": {
                  "line": 557,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 16221,
              "end": 16817,
              "loc": {
                "start": {
                  "line": 560,
                  "column": 0
                },
                "end": {
                  "line": 579,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
            "start": 15405,
            "end": 16098,
            "loc": {
              "start": {
                "line": 536,
                "column": 0
              },
              "end": {
                "line": 557,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 16221,
            "end": 16817,
            "loc": {
              "start": {
                "line": 560,
                "column": 0
              },
              "end": {
                "line": 579,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 16818,
        "end": 16932,
        "loc": {
          "start": {
            "line": 580,
            "column": 0
          },
          "end": {
            "line": 580,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 16825,
          "end": 16932,
          "loc": {
            "start": {
              "line": 580,
              "column": 7
            },
            "end": {
              "line": 580,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 16831,
              "end": 16931,
              "loc": {
                "start": {
                  "line": 580,
                  "column": 13
                },
                "end": {
                  "line": 580,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 16831,
                "end": 16834,
                "loc": {
                  "start": {
                    "line": 580,
                    "column": 13
                  },
                  "end": {
                    "line": 580,
                    "column": 16
                  },
                  "identifierName": "max"
                },
                "name": "max",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 16837,
                "end": 16931,
                "loc": {
                  "start": {
                    "line": 580,
                    "column": 19
                  },
                  "end": {
                    "line": 580,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 16837,
                  "end": 16872,
                  "loc": {
                    "start": {
                      "line": 580,
                      "column": 19
                    },
                    "end": {
                      "line": 580,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 16873,
                    "end": 16891,
                    "loc": {
                      "start": {
                        "line": 580,
                        "column": 55
                      },
                      "end": {
                        "line": 580,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 16873,
                      "end": 16887,
                      "loc": {
                        "start": {
                          "line": 580,
                          "column": 55
                        },
                        "end": {
                          "line": 580,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 16873,
                        "end": 16878,
                        "loc": {
                          "start": {
                            "line": 580,
                            "column": 55
                          },
                          "end": {
                            "line": 580,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 16879,
                        "end": 16887,
                        "loc": {
                          "start": {
                            "line": 580,
                            "column": 61
                          },
                          "end": {
                            "line": 580,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 16888,
                      "end": 16891,
                      "loc": {
                        "start": {
                          "line": 580,
                          "column": 70
                        },
                        "end": {
                          "line": 580,
                          "column": 73
                        },
                        "identifierName": "max"
                      },
                      "name": "max"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 16893,
                    "end": 16930,
                    "loc": {
                      "start": {
                        "line": 580,
                        "column": 75
                      },
                      "end": {
                        "line": 580,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `max` without parameters",
                      "raw": "'Cannot use `max` without parameters'"
                    },
                    "value": "Cannot use `max` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 16221,
              "end": 16817,
              "loc": {
                "start": {
                  "line": 560,
                  "column": 0
                },
                "end": {
                  "line": 579,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 16934,
              "end": 17528,
              "loc": {
                "start": {
                  "line": 582,
                  "column": 0
                },
                "end": {
                  "line": 601,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 16221,
            "end": 16817,
            "loc": {
              "start": {
                "line": 560,
                "column": 0
              },
              "end": {
                "line": 579,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 16934,
            "end": 17528,
            "loc": {
              "start": {
                "line": 582,
                "column": 0
              },
              "end": {
                "line": 601,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 17529,
        "end": 17643,
        "loc": {
          "start": {
            "line": 602,
            "column": 0
          },
          "end": {
            "line": 602,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 17536,
          "end": 17643,
          "loc": {
            "start": {
              "line": 602,
              "column": 7
            },
            "end": {
              "line": 602,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 17542,
              "end": 17642,
              "loc": {
                "start": {
                  "line": 602,
                  "column": 13
                },
                "end": {
                  "line": 602,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 17542,
                "end": 17545,
                "loc": {
                  "start": {
                    "line": 602,
                    "column": 13
                  },
                  "end": {
                    "line": 602,
                    "column": 16
                  },
                  "identifierName": "min"
                },
                "name": "min",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 17548,
                "end": 17642,
                "loc": {
                  "start": {
                    "line": 602,
                    "column": 19
                  },
                  "end": {
                    "line": 602,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 17548,
                  "end": 17583,
                  "loc": {
                    "start": {
                      "line": 602,
                      "column": 19
                    },
                    "end": {
                      "line": 602,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 17584,
                    "end": 17602,
                    "loc": {
                      "start": {
                        "line": 602,
                        "column": 55
                      },
                      "end": {
                        "line": 602,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 17584,
                      "end": 17598,
                      "loc": {
                        "start": {
                          "line": 602,
                          "column": 55
                        },
                        "end": {
                          "line": 602,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 17584,
                        "end": 17589,
                        "loc": {
                          "start": {
                            "line": 602,
                            "column": 55
                          },
                          "end": {
                            "line": 602,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 17590,
                        "end": 17598,
                        "loc": {
                          "start": {
                            "line": 602,
                            "column": 61
                          },
                          "end": {
                            "line": 602,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 17599,
                      "end": 17602,
                      "loc": {
                        "start": {
                          "line": 602,
                          "column": 70
                        },
                        "end": {
                          "line": 602,
                          "column": 73
                        },
                        "identifierName": "min"
                      },
                      "name": "min"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 17604,
                    "end": 17641,
                    "loc": {
                      "start": {
                        "line": 602,
                        "column": 75
                      },
                      "end": {
                        "line": 602,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `min` without parameters",
                      "raw": "'Cannot use `min` without parameters'"
                    },
                    "value": "Cannot use `min` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 16934,
              "end": 17528,
              "loc": {
                "start": {
                  "line": 582,
                  "column": 0
                },
                "end": {
                  "line": 601,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 17645,
              "end": 18309,
              "loc": {
                "start": {
                  "line": 604,
                  "column": 0
                },
                "end": {
                  "line": 624,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 16934,
            "end": 17528,
            "loc": {
              "start": {
                "line": 582,
                "column": 0
              },
              "end": {
                "line": 601,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 17645,
            "end": 18309,
            "loc": {
              "start": {
                "line": 604,
                "column": 0
              },
              "end": {
                "line": 624,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 18310,
        "end": 18427,
        "loc": {
          "start": {
            "line": 625,
            "column": 0
          },
          "end": {
            "line": 625,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 18317,
          "end": 18427,
          "loc": {
            "start": {
              "line": 625,
              "column": 7
            },
            "end": {
              "line": 625,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 18323,
              "end": 18426,
              "loc": {
                "start": {
                  "line": 625,
                  "column": 13
                },
                "end": {
                  "line": 625,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 18323,
                "end": 18327,
                "loc": {
                  "start": {
                    "line": 625,
                    "column": 13
                  },
                  "end": {
                    "line": 625,
                    "column": 17
                  },
                  "identifierName": "none"
                },
                "name": "none",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 18330,
                "end": 18426,
                "loc": {
                  "start": {
                    "line": 625,
                    "column": 20
                  },
                  "end": {
                    "line": 625,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 18330,
                  "end": 18365,
                  "loc": {
                    "start": {
                      "line": 625,
                      "column": 20
                    },
                    "end": {
                      "line": 625,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 18366,
                    "end": 18385,
                    "loc": {
                      "start": {
                        "line": 625,
                        "column": 56
                      },
                      "end": {
                        "line": 625,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 18366,
                      "end": 18380,
                      "loc": {
                        "start": {
                          "line": 625,
                          "column": 56
                        },
                        "end": {
                          "line": 625,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 18366,
                        "end": 18371,
                        "loc": {
                          "start": {
                            "line": 625,
                            "column": 56
                          },
                          "end": {
                            "line": 625,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 18372,
                        "end": 18380,
                        "loc": {
                          "start": {
                            "line": 625,
                            "column": 62
                          },
                          "end": {
                            "line": 625,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 18381,
                      "end": 18385,
                      "loc": {
                        "start": {
                          "line": 625,
                          "column": 71
                        },
                        "end": {
                          "line": 625,
                          "column": 75
                        },
                        "identifierName": "none"
                      },
                      "name": "none"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 18387,
                    "end": 18425,
                    "loc": {
                      "start": {
                        "line": 625,
                        "column": 77
                      },
                      "end": {
                        "line": 625,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `none` without parameters",
                      "raw": "'Cannot use `none` without parameters'"
                    },
                    "value": "Cannot use `none` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 17645,
              "end": 18309,
              "loc": {
                "start": {
                  "line": 604,
                  "column": 0
                },
                "end": {
                  "line": 624,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
              "start": 18429,
              "end": 18971,
              "loc": {
                "start": {
                  "line": 627,
                  "column": 0
                },
                "end": {
                  "line": 646,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 17645,
            "end": 18309,
            "loc": {
              "start": {
                "line": 604,
                "column": 0
              },
              "end": {
                "line": 624,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
            "start": 18429,
            "end": 18971,
            "loc": {
              "start": {
                "line": 627,
                "column": 0
              },
              "end": {
                "line": 646,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 18972,
        "end": 19086,
        "loc": {
          "start": {
            "line": 647,
            "column": 0
          },
          "end": {
            "line": 647,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 18979,
          "end": 19086,
          "loc": {
            "start": {
              "line": 647,
              "column": 7
            },
            "end": {
              "line": 647,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 18985,
              "end": 19085,
              "loc": {
                "start": {
                  "line": 647,
                  "column": 13
                },
                "end": {
                  "line": 647,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 18985,
                "end": 18988,
                "loc": {
                  "start": {
                    "line": 647,
                    "column": 13
                  },
                  "end": {
                    "line": 647,
                    "column": 16
                  },
                  "identifierName": "not"
                },
                "name": "not",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 18991,
                "end": 19085,
                "loc": {
                  "start": {
                    "line": 647,
                    "column": 19
                  },
                  "end": {
                    "line": 647,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 18991,
                  "end": 19026,
                  "loc": {
                    "start": {
                      "line": 647,
                      "column": 19
                    },
                    "end": {
                      "line": 647,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 19027,
                    "end": 19045,
                    "loc": {
                      "start": {
                        "line": 647,
                        "column": 55
                      },
                      "end": {
                        "line": 647,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 19027,
                      "end": 19041,
                      "loc": {
                        "start": {
                          "line": 647,
                          "column": 55
                        },
                        "end": {
                          "line": 647,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 19027,
                        "end": 19032,
                        "loc": {
                          "start": {
                            "line": 647,
                            "column": 55
                          },
                          "end": {
                            "line": 647,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 19033,
                        "end": 19041,
                        "loc": {
                          "start": {
                            "line": 647,
                            "column": 61
                          },
                          "end": {
                            "line": 647,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 19042,
                      "end": 19045,
                      "loc": {
                        "start": {
                          "line": 647,
                          "column": 70
                        },
                        "end": {
                          "line": 647,
                          "column": 73
                        },
                        "identifierName": "not"
                      },
                      "name": "not"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 19047,
                    "end": 19084,
                    "loc": {
                      "start": {
                        "line": 647,
                        "column": 75
                      },
                      "end": {
                        "line": 647,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `not` without parameters",
                      "raw": "'Cannot use `not` without parameters'"
                    },
                    "value": "Cannot use `not` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
              "start": 18429,
              "end": 18971,
              "loc": {
                "start": {
                  "line": 627,
                  "column": 0
                },
                "end": {
                  "line": 646,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 19088,
              "end": 19726,
              "loc": {
                "start": {
                  "line": 649,
                  "column": 0
                },
                "end": {
                  "line": 668,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
            "start": 18429,
            "end": 18971,
            "loc": {
              "start": {
                "line": 627,
                "column": 0
              },
              "end": {
                "line": 646,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 19088,
            "end": 19726,
            "loc": {
              "start": {
                "line": 649,
                "column": 0
              },
              "end": {
                "line": 668,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 19727,
        "end": 19856,
        "loc": {
          "start": {
            "line": 669,
            "column": 0
          },
          "end": {
            "line": 669,
            "column": 129
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 19734,
          "end": 19856,
          "loc": {
            "start": {
              "line": 669,
              "column": 7
            },
            "end": {
              "line": 669,
              "column": 129
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 19740,
              "end": 19855,
              "loc": {
                "start": {
                  "line": 669,
                  "column": 13
                },
                "end": {
                  "line": 669,
                  "column": 128
                }
              },
              "id": {
                "type": "Identifier",
                "start": 19740,
                "end": 19748,
                "loc": {
                  "start": {
                    "line": 669,
                    "column": 13
                  },
                  "end": {
                    "line": 669,
                    "column": 21
                  },
                  "identifierName": "notEmpty"
                },
                "name": "notEmpty",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 19751,
                "end": 19855,
                "loc": {
                  "start": {
                    "line": 669,
                    "column": 24
                  },
                  "end": {
                    "line": 669,
                    "column": 128
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 19751,
                  "end": 19786,
                  "loc": {
                    "start": {
                      "line": 669,
                      "column": 24
                    },
                    "end": {
                      "line": 669,
                      "column": 59
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 19787,
                    "end": 19810,
                    "loc": {
                      "start": {
                        "line": 669,
                        "column": 60
                      },
                      "end": {
                        "line": 669,
                        "column": 83
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 19787,
                      "end": 19801,
                      "loc": {
                        "start": {
                          "line": 669,
                          "column": 60
                        },
                        "end": {
                          "line": 669,
                          "column": 74
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 19787,
                        "end": 19792,
                        "loc": {
                          "start": {
                            "line": 669,
                            "column": 60
                          },
                          "end": {
                            "line": 669,
                            "column": 65
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 19793,
                        "end": 19801,
                        "loc": {
                          "start": {
                            "line": 669,
                            "column": 66
                          },
                          "end": {
                            "line": 669,
                            "column": 74
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 19802,
                      "end": 19810,
                      "loc": {
                        "start": {
                          "line": 669,
                          "column": 75
                        },
                        "end": {
                          "line": 669,
                          "column": 83
                        },
                        "identifierName": "notEmpty"
                      },
                      "name": "notEmpty"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 19812,
                    "end": 19854,
                    "loc": {
                      "start": {
                        "line": 669,
                        "column": 85
                      },
                      "end": {
                        "line": 669,
                        "column": 127
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `notEmpty` without parameters",
                      "raw": "'Cannot use `notEmpty` without parameters'"
                    },
                    "value": "Cannot use `notEmpty` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 19088,
              "end": 19726,
              "loc": {
                "start": {
                  "line": 649,
                  "column": 0
                },
                "end": {
                  "line": 668,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
              "start": 19858,
              "end": 20665,
              "loc": {
                "start": {
                  "line": 671,
                  "column": 0
                },
                "end": {
                  "line": 693,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 19088,
            "end": 19726,
            "loc": {
              "start": {
                "line": 649,
                "column": 0
              },
              "end": {
                "line": 668,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
            "start": 19858,
            "end": 20665,
            "loc": {
              "start": {
                "line": 671,
                "column": 0
              },
              "end": {
                "line": 693,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 20666,
        "end": 20789,
        "loc": {
          "start": {
            "line": 694,
            "column": 0
          },
          "end": {
            "line": 694,
            "column": 123
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 20673,
          "end": 20789,
          "loc": {
            "start": {
              "line": 694,
              "column": 7
            },
            "end": {
              "line": 694,
              "column": 123
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 20679,
              "end": 20788,
              "loc": {
                "start": {
                  "line": 694,
                  "column": 13
                },
                "end": {
                  "line": 694,
                  "column": 122
                }
              },
              "id": {
                "type": "Identifier",
                "start": 20679,
                "end": 20685,
                "loc": {
                  "start": {
                    "line": 694,
                    "column": 13
                  },
                  "end": {
                    "line": 694,
                    "column": 19
                  },
                  "identifierName": "oneWay"
                },
                "name": "oneWay",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 20688,
                "end": 20788,
                "loc": {
                  "start": {
                    "line": 694,
                    "column": 22
                  },
                  "end": {
                    "line": 694,
                    "column": 122
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 20688,
                  "end": 20723,
                  "loc": {
                    "start": {
                      "line": 694,
                      "column": 22
                    },
                    "end": {
                      "line": 694,
                      "column": 57
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 20724,
                    "end": 20745,
                    "loc": {
                      "start": {
                        "line": 694,
                        "column": 58
                      },
                      "end": {
                        "line": 694,
                        "column": 79
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 20724,
                      "end": 20738,
                      "loc": {
                        "start": {
                          "line": 694,
                          "column": 58
                        },
                        "end": {
                          "line": 694,
                          "column": 72
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 20724,
                        "end": 20729,
                        "loc": {
                          "start": {
                            "line": 694,
                            "column": 58
                          },
                          "end": {
                            "line": 694,
                            "column": 63
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 20730,
                        "end": 20738,
                        "loc": {
                          "start": {
                            "line": 694,
                            "column": 64
                          },
                          "end": {
                            "line": 694,
                            "column": 72
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 20739,
                      "end": 20745,
                      "loc": {
                        "start": {
                          "line": 694,
                          "column": 73
                        },
                        "end": {
                          "line": 694,
                          "column": 79
                        },
                        "identifierName": "oneWay"
                      },
                      "name": "oneWay"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 20747,
                    "end": 20787,
                    "loc": {
                      "start": {
                        "line": 694,
                        "column": 81
                      },
                      "end": {
                        "line": 694,
                        "column": 121
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `oneWay` without parameters",
                      "raw": "'Cannot use `oneWay` without parameters'"
                    },
                    "value": "Cannot use `oneWay` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
              "start": 19858,
              "end": 20665,
              "loc": {
                "start": {
                  "line": 671,
                  "column": 0
                },
                "end": {
                  "line": 693,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
              "start": 20791,
              "end": 21378,
              "loc": {
                "start": {
                  "line": 696,
                  "column": 0
                },
                "end": {
                  "line": 716,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
            "start": 19858,
            "end": 20665,
            "loc": {
              "start": {
                "line": 671,
                "column": 0
              },
              "end": {
                "line": 693,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
            "start": 20791,
            "end": 21378,
            "loc": {
              "start": {
                "line": 696,
                "column": 0
              },
              "end": {
                "line": 716,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 21379,
        "end": 21490,
        "loc": {
          "start": {
            "line": 717,
            "column": 0
          },
          "end": {
            "line": 717,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 21386,
          "end": 21490,
          "loc": {
            "start": {
              "line": 717,
              "column": 7
            },
            "end": {
              "line": 717,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 21392,
              "end": 21489,
              "loc": {
                "start": {
                  "line": 717,
                  "column": 13
                },
                "end": {
                  "line": 717,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 21392,
                "end": 21394,
                "loc": {
                  "start": {
                    "line": 717,
                    "column": 13
                  },
                  "end": {
                    "line": 717,
                    "column": 15
                  },
                  "identifierName": "or"
                },
                "name": "or",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 21397,
                "end": 21489,
                "loc": {
                  "start": {
                    "line": 717,
                    "column": 18
                  },
                  "end": {
                    "line": 717,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 21397,
                  "end": 21432,
                  "loc": {
                    "start": {
                      "line": 717,
                      "column": 18
                    },
                    "end": {
                      "line": 717,
                      "column": 53
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 21433,
                    "end": 21450,
                    "loc": {
                      "start": {
                        "line": 717,
                        "column": 54
                      },
                      "end": {
                        "line": 717,
                        "column": 71
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 21433,
                      "end": 21447,
                      "loc": {
                        "start": {
                          "line": 717,
                          "column": 54
                        },
                        "end": {
                          "line": 717,
                          "column": 68
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 21433,
                        "end": 21438,
                        "loc": {
                          "start": {
                            "line": 717,
                            "column": 54
                          },
                          "end": {
                            "line": 717,
                            "column": 59
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 21439,
                        "end": 21447,
                        "loc": {
                          "start": {
                            "line": 717,
                            "column": 60
                          },
                          "end": {
                            "line": 717,
                            "column": 68
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 21448,
                      "end": 21450,
                      "loc": {
                        "start": {
                          "line": 717,
                          "column": 69
                        },
                        "end": {
                          "line": 717,
                          "column": 71
                        },
                        "identifierName": "or"
                      },
                      "name": "or"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 21452,
                    "end": 21488,
                    "loc": {
                      "start": {
                        "line": 717,
                        "column": 73
                      },
                      "end": {
                        "line": 717,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `or` without parameters",
                      "raw": "'Cannot use `or` without parameters'"
                    },
                    "value": "Cannot use `or` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
              "start": 20791,
              "end": 21378,
              "loc": {
                "start": {
                  "line": 696,
                  "column": 0
                },
                "end": {
                  "line": 716,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
              "start": 21492,
              "end": 22032,
              "loc": {
                "start": {
                  "line": 719,
                  "column": 0
                },
                "end": {
                  "line": 736,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
            "start": 20791,
            "end": 21378,
            "loc": {
              "start": {
                "line": 696,
                "column": 0
              },
              "end": {
                "line": 716,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
            "start": 21492,
            "end": 22032,
            "loc": {
              "start": {
                "line": 719,
                "column": 0
              },
              "end": {
                "line": 736,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 22033,
        "end": 22153,
        "loc": {
          "start": {
            "line": 737,
            "column": 0
          },
          "end": {
            "line": 737,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 22040,
          "end": 22153,
          "loc": {
            "start": {
              "line": 737,
              "column": 7
            },
            "end": {
              "line": 737,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 22046,
              "end": 22152,
              "loc": {
                "start": {
                  "line": 737,
                  "column": 13
                },
                "end": {
                  "line": 737,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 22046,
                "end": 22051,
                "loc": {
                  "start": {
                    "line": 737,
                    "column": 13
                  },
                  "end": {
                    "line": 737,
                    "column": 18
                  },
                  "identifierName": "reads"
                },
                "name": "reads",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 22054,
                "end": 22152,
                "loc": {
                  "start": {
                    "line": 737,
                    "column": 21
                  },
                  "end": {
                    "line": 737,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 22054,
                  "end": 22089,
                  "loc": {
                    "start": {
                      "line": 737,
                      "column": 21
                    },
                    "end": {
                      "line": 737,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 22090,
                    "end": 22110,
                    "loc": {
                      "start": {
                        "line": 737,
                        "column": 57
                      },
                      "end": {
                        "line": 737,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 22090,
                      "end": 22104,
                      "loc": {
                        "start": {
                          "line": 737,
                          "column": 57
                        },
                        "end": {
                          "line": 737,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 22090,
                        "end": 22095,
                        "loc": {
                          "start": {
                            "line": 737,
                            "column": 57
                          },
                          "end": {
                            "line": 737,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 22096,
                        "end": 22104,
                        "loc": {
                          "start": {
                            "line": 737,
                            "column": 63
                          },
                          "end": {
                            "line": 737,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 22105,
                      "end": 22110,
                      "loc": {
                        "start": {
                          "line": 737,
                          "column": 72
                        },
                        "end": {
                          "line": 737,
                          "column": 77
                        },
                        "identifierName": "reads"
                      },
                      "name": "reads"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 22112,
                    "end": 22151,
                    "loc": {
                      "start": {
                        "line": 737,
                        "column": 79
                      },
                      "end": {
                        "line": 737,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `reads` without parameters",
                      "raw": "'Cannot use `reads` without parameters'"
                    },
                    "value": "Cannot use `reads` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
              "start": 21492,
              "end": 22032,
              "loc": {
                "start": {
                  "line": 719,
                  "column": 0
                },
                "end": {
                  "line": 736,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
              "start": 22155,
              "end": 22901,
              "loc": {
                "start": {
                  "line": 739,
                  "column": 0
                },
                "end": {
                  "line": 760,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
            "start": 21492,
            "end": 22032,
            "loc": {
              "start": {
                "line": 719,
                "column": 0
              },
              "end": {
                "line": 736,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
            "start": 22155,
            "end": 22901,
            "loc": {
              "start": {
                "line": 739,
                "column": 0
              },
              "end": {
                "line": 760,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 22902,
        "end": 23028,
        "loc": {
          "start": {
            "line": 761,
            "column": 0
          },
          "end": {
            "line": 761,
            "column": 126
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 22909,
          "end": 23028,
          "loc": {
            "start": {
              "line": 761,
              "column": 7
            },
            "end": {
              "line": 761,
              "column": 126
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 22915,
              "end": 23027,
              "loc": {
                "start": {
                  "line": 761,
                  "column": 13
                },
                "end": {
                  "line": 761,
                  "column": 125
                }
              },
              "id": {
                "type": "Identifier",
                "start": 22915,
                "end": 22922,
                "loc": {
                  "start": {
                    "line": 761,
                    "column": 13
                  },
                  "end": {
                    "line": 761,
                    "column": 20
                  },
                  "identifierName": "setDiff"
                },
                "name": "setDiff",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 22925,
                "end": 23027,
                "loc": {
                  "start": {
                    "line": 761,
                    "column": 23
                  },
                  "end": {
                    "line": 761,
                    "column": 125
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 22925,
                  "end": 22960,
                  "loc": {
                    "start": {
                      "line": 761,
                      "column": 23
                    },
                    "end": {
                      "line": 761,
                      "column": 58
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 22961,
                    "end": 22983,
                    "loc": {
                      "start": {
                        "line": 761,
                        "column": 59
                      },
                      "end": {
                        "line": 761,
                        "column": 81
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 22961,
                      "end": 22975,
                      "loc": {
                        "start": {
                          "line": 761,
                          "column": 59
                        },
                        "end": {
                          "line": 761,
                          "column": 73
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 22961,
                        "end": 22966,
                        "loc": {
                          "start": {
                            "line": 761,
                            "column": 59
                          },
                          "end": {
                            "line": 761,
                            "column": 64
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 22967,
                        "end": 22975,
                        "loc": {
                          "start": {
                            "line": 761,
                            "column": 65
                          },
                          "end": {
                            "line": 761,
                            "column": 73
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 22976,
                      "end": 22983,
                      "loc": {
                        "start": {
                          "line": 761,
                          "column": 74
                        },
                        "end": {
                          "line": 761,
                          "column": 81
                        },
                        "identifierName": "setDiff"
                      },
                      "name": "setDiff"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 22985,
                    "end": 23026,
                    "loc": {
                      "start": {
                        "line": 761,
                        "column": 83
                      },
                      "end": {
                        "line": 761,
                        "column": 124
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `setDiff` without parameters",
                      "raw": "'Cannot use `setDiff` without parameters'"
                    },
                    "value": "Cannot use `setDiff` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
              "start": 22155,
              "end": 22901,
              "loc": {
                "start": {
                  "line": 739,
                  "column": 0
                },
                "end": {
                  "line": 760,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
              "start": 23030,
              "end": 24667,
              "loc": {
                "start": {
                  "line": 763,
                  "column": 0
                },
                "end": {
                  "line": 808,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
            "start": 22155,
            "end": 22901,
            "loc": {
              "start": {
                "line": 739,
                "column": 0
              },
              "end": {
                "line": 760,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
            "start": 23030,
            "end": 24667,
            "loc": {
              "start": {
                "line": 763,
                "column": 0
              },
              "end": {
                "line": 808,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 24668,
        "end": 24785,
        "loc": {
          "start": {
            "line": 809,
            "column": 0
          },
          "end": {
            "line": 809,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 24675,
          "end": 24785,
          "loc": {
            "start": {
              "line": 809,
              "column": 7
            },
            "end": {
              "line": 809,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 24681,
              "end": 24784,
              "loc": {
                "start": {
                  "line": 809,
                  "column": 13
                },
                "end": {
                  "line": 809,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 24681,
                "end": 24685,
                "loc": {
                  "start": {
                    "line": 809,
                    "column": 13
                  },
                  "end": {
                    "line": 809,
                    "column": 17
                  },
                  "identifierName": "sort"
                },
                "name": "sort",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 24688,
                "end": 24784,
                "loc": {
                  "start": {
                    "line": 809,
                    "column": 20
                  },
                  "end": {
                    "line": 809,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 24688,
                  "end": 24723,
                  "loc": {
                    "start": {
                      "line": 809,
                      "column": 20
                    },
                    "end": {
                      "line": 809,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 24724,
                    "end": 24743,
                    "loc": {
                      "start": {
                        "line": 809,
                        "column": 56
                      },
                      "end": {
                        "line": 809,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 24724,
                      "end": 24738,
                      "loc": {
                        "start": {
                          "line": 809,
                          "column": 56
                        },
                        "end": {
                          "line": 809,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 24724,
                        "end": 24729,
                        "loc": {
                          "start": {
                            "line": 809,
                            "column": 56
                          },
                          "end": {
                            "line": 809,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 24730,
                        "end": 24738,
                        "loc": {
                          "start": {
                            "line": 809,
                            "column": 62
                          },
                          "end": {
                            "line": 809,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 24739,
                      "end": 24743,
                      "loc": {
                        "start": {
                          "line": 809,
                          "column": 71
                        },
                        "end": {
                          "line": 809,
                          "column": 75
                        },
                        "identifierName": "sort"
                      },
                      "name": "sort"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 24745,
                    "end": 24783,
                    "loc": {
                      "start": {
                        "line": 809,
                        "column": 77
                      },
                      "end": {
                        "line": 809,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `sort` without parameters",
                      "raw": "'Cannot use `sort` without parameters'"
                    },
                    "value": "Cannot use `sort` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
              "start": 23030,
              "end": 24667,
              "loc": {
                "start": {
                  "line": 763,
                  "column": 0
                },
                "end": {
                  "line": 808,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
              "start": 24787,
              "end": 25295,
              "loc": {
                "start": {
                  "line": 811,
                  "column": 0
                },
                "end": {
                  "line": 830,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
            "start": 23030,
            "end": 24667,
            "loc": {
              "start": {
                "line": 763,
                "column": 0
              },
              "end": {
                "line": 808,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
            "start": 24787,
            "end": 25295,
            "loc": {
              "start": {
                "line": 811,
                "column": 0
              },
              "end": {
                "line": 830,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 25296,
        "end": 25410,
        "loc": {
          "start": {
            "line": 831,
            "column": 0
          },
          "end": {
            "line": 831,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 25303,
          "end": 25410,
          "loc": {
            "start": {
              "line": 831,
              "column": 7
            },
            "end": {
              "line": 831,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 25309,
              "end": 25409,
              "loc": {
                "start": {
                  "line": 831,
                  "column": 13
                },
                "end": {
                  "line": 831,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 25309,
                "end": 25312,
                "loc": {
                  "start": {
                    "line": 831,
                    "column": 13
                  },
                  "end": {
                    "line": 831,
                    "column": 16
                  },
                  "identifierName": "sum"
                },
                "name": "sum",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 25315,
                "end": 25409,
                "loc": {
                  "start": {
                    "line": 831,
                    "column": 19
                  },
                  "end": {
                    "line": 831,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 25315,
                  "end": 25350,
                  "loc": {
                    "start": {
                      "line": 831,
                      "column": 19
                    },
                    "end": {
                      "line": 831,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 25351,
                    "end": 25369,
                    "loc": {
                      "start": {
                        "line": 831,
                        "column": 55
                      },
                      "end": {
                        "line": 831,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 25351,
                      "end": 25365,
                      "loc": {
                        "start": {
                          "line": 831,
                          "column": 55
                        },
                        "end": {
                          "line": 831,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 25351,
                        "end": 25356,
                        "loc": {
                          "start": {
                            "line": 831,
                            "column": 55
                          },
                          "end": {
                            "line": 831,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 25357,
                        "end": 25365,
                        "loc": {
                          "start": {
                            "line": 831,
                            "column": 61
                          },
                          "end": {
                            "line": 831,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 25366,
                      "end": 25369,
                      "loc": {
                        "start": {
                          "line": 831,
                          "column": 70
                        },
                        "end": {
                          "line": 831,
                          "column": 73
                        },
                        "identifierName": "sum"
                      },
                      "name": "sum"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 25371,
                    "end": 25408,
                    "loc": {
                      "start": {
                        "line": 831,
                        "column": 75
                      },
                      "end": {
                        "line": 831,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `sum` without parameters",
                      "raw": "'Cannot use `sum` without parameters'"
                    },
                    "value": "Cannot use `sum` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
              "start": 24787,
              "end": 25295,
              "loc": {
                "start": {
                  "line": 811,
                  "column": 0
                },
                "end": {
                  "line": 830,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
              "start": 25412,
              "end": 26055,
              "loc": {
                "start": {
                  "line": 833,
                  "column": 0
                },
                "end": {
                  "line": 852,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
            "start": 24787,
            "end": 25295,
            "loc": {
              "start": {
                "line": 811,
                "column": 0
              },
              "end": {
                "line": 830,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
            "start": 25412,
            "end": 26055,
            "loc": {
              "start": {
                "line": 833,
                "column": 0
              },
              "end": {
                "line": 852,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 26056,
        "end": 26176,
        "loc": {
          "start": {
            "line": 853,
            "column": 0
          },
          "end": {
            "line": 853,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 26063,
          "end": 26176,
          "loc": {
            "start": {
              "line": 853,
              "column": 7
            },
            "end": {
              "line": 853,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 26069,
              "end": 26175,
              "loc": {
                "start": {
                  "line": 853,
                  "column": 13
                },
                "end": {
                  "line": 853,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 26069,
                "end": 26074,
                "loc": {
                  "start": {
                    "line": 853,
                    "column": 13
                  },
                  "end": {
                    "line": 853,
                    "column": 18
                  },
                  "identifierName": "union"
                },
                "name": "union",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 26077,
                "end": 26175,
                "loc": {
                  "start": {
                    "line": 853,
                    "column": 21
                  },
                  "end": {
                    "line": 853,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 26077,
                  "end": 26112,
                  "loc": {
                    "start": {
                      "line": 853,
                      "column": 21
                    },
                    "end": {
                      "line": 853,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 26113,
                    "end": 26133,
                    "loc": {
                      "start": {
                        "line": 853,
                        "column": 57
                      },
                      "end": {
                        "line": 853,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 26113,
                      "end": 26127,
                      "loc": {
                        "start": {
                          "line": 853,
                          "column": 57
                        },
                        "end": {
                          "line": 853,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 26113,
                        "end": 26118,
                        "loc": {
                          "start": {
                            "line": 853,
                            "column": 57
                          },
                          "end": {
                            "line": 853,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 26119,
                        "end": 26127,
                        "loc": {
                          "start": {
                            "line": 853,
                            "column": 63
                          },
                          "end": {
                            "line": 853,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 26128,
                      "end": 26133,
                      "loc": {
                        "start": {
                          "line": 853,
                          "column": 72
                        },
                        "end": {
                          "line": 853,
                          "column": 77
                        },
                        "identifierName": "union"
                      },
                      "name": "union"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 26135,
                    "end": 26174,
                    "loc": {
                      "start": {
                        "line": 853,
                        "column": 79
                      },
                      "end": {
                        "line": 853,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `union` without parameters",
                      "raw": "'Cannot use `union` without parameters'"
                    },
                    "value": "Cannot use `union` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
              "start": 25412,
              "end": 26055,
              "loc": {
                "start": {
                  "line": 833,
                  "column": 0
                },
                "end": {
                  "line": 852,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
              "start": 26178,
              "end": 26837,
              "loc": {
                "start": {
                  "line": 855,
                  "column": 0
                },
                "end": {
                  "line": 874,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
            "start": 25412,
            "end": 26055,
            "loc": {
              "start": {
                "line": 833,
                "column": 0
              },
              "end": {
                "line": 852,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
            "start": 26178,
            "end": 26837,
            "loc": {
              "start": {
                "line": 855,
                "column": 0
              },
              "end": {
                "line": 874,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 26838,
        "end": 26955,
        "loc": {
          "start": {
            "line": 875,
            "column": 0
          },
          "end": {
            "line": 875,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 26845,
          "end": 26955,
          "loc": {
            "start": {
              "line": 875,
              "column": 7
            },
            "end": {
              "line": 875,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 26851,
              "end": 26954,
              "loc": {
                "start": {
                  "line": 875,
                  "column": 13
                },
                "end": {
                  "line": 875,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 26851,
                "end": 26855,
                "loc": {
                  "start": {
                    "line": 875,
                    "column": 13
                  },
                  "end": {
                    "line": 875,
                    "column": 17
                  },
                  "identifierName": "uniq"
                },
                "name": "uniq",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 26858,
                "end": 26954,
                "loc": {
                  "start": {
                    "line": 875,
                    "column": 20
                  },
                  "end": {
                    "line": 875,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 26858,
                  "end": 26893,
                  "loc": {
                    "start": {
                      "line": 875,
                      "column": 20
                    },
                    "end": {
                      "line": 875,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 26894,
                    "end": 26913,
                    "loc": {
                      "start": {
                        "line": 875,
                        "column": 56
                      },
                      "end": {
                        "line": 875,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 26894,
                      "end": 26908,
                      "loc": {
                        "start": {
                          "line": 875,
                          "column": 56
                        },
                        "end": {
                          "line": 875,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 26894,
                        "end": 26899,
                        "loc": {
                          "start": {
                            "line": 875,
                            "column": 56
                          },
                          "end": {
                            "line": 875,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 26900,
                        "end": 26908,
                        "loc": {
                          "start": {
                            "line": 875,
                            "column": 62
                          },
                          "end": {
                            "line": 875,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 26909,
                      "end": 26913,
                      "loc": {
                        "start": {
                          "line": 875,
                          "column": 71
                        },
                        "end": {
                          "line": 875,
                          "column": 75
                        },
                        "identifierName": "uniq"
                      },
                      "name": "uniq"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 26915,
                    "end": 26953,
                    "loc": {
                      "start": {
                        "line": 875,
                        "column": 77
                      },
                      "end": {
                        "line": 875,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `uniq` without parameters",
                      "raw": "'Cannot use `uniq` without parameters'"
                    },
                    "value": "Cannot use `uniq` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
              "start": 26178,
              "end": 26837,
              "loc": {
                "start": {
                  "line": 855,
                  "column": 0
                },
                "end": {
                  "line": 874,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
            "start": 26178,
            "end": 26837,
            "loc": {
              "start": {
                "line": 855,
                "column": 0
              },
              "end": {
                "line": 874,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportDefaultDeclaration",
        "start": 2237,
        "end": 2261,
        "loc": {
          "start": {
            "line": 108,
            "column": 0
          },
          "end": {
            "line": 108,
            "column": 24
          }
        },
        "declaration": {
          "type": "VariableDeclaration",
          "start": 1959,
          "end": 2235,
          "loc": {
            "start": {
              "line": 99,
              "column": 0
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 1965,
              "end": 2234,
              "loc": {
                "start": {
                  "line": 99,
                  "column": 6
                },
                "end": {
                  "line": 106,
                  "column": 2
                }
              },
              "id": {
                "type": "Identifier",
                "start": 1965,
                "end": 1973,
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 6
                  },
                  "end": {
                    "line": 99,
                    "column": 14
                  },
                  "identifierName": "computed"
                },
                "name": "computed",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 1976,
                "end": 2234,
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 17
                  },
                  "end": {
                    "line": 106,
                    "column": 2
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 1976,
                  "end": 1995,
                  "loc": {
                    "start": {
                      "line": 99,
                      "column": 17
                    },
                    "end": {
                      "line": 99,
                      "column": 36
                    },
                    "identifierName": "decoratorWithParams"
                  },
                  "name": "decoratorWithParams"
                },
                "arguments": [
                  {
                    "type": "FunctionExpression",
                    "start": 1996,
                    "end": 2233,
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 37
                      },
                      "end": {
                        "line": 106,
                        "column": 1
                      }
                    },
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "async": false,
                    "params": [
                      {
                        "type": "Identifier",
                        "start": 2005,
                        "end": 2011,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 46
                          },
                          "end": {
                            "line": 99,
                            "column": 52
                          },
                          "identifierName": "target"
                        },
                        "name": "target"
                      },
                      {
                        "type": "Identifier",
                        "start": 2013,
                        "end": 2016,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 54
                          },
                          "end": {
                            "line": 99,
                            "column": 57
                          },
                          "identifierName": "key"
                        },
                        "name": "key"
                      },
                      {
                        "type": "Identifier",
                        "start": 2018,
                        "end": 2022,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 59
                          },
                          "end": {
                            "line": 99,
                            "column": 63
                          },
                          "identifierName": "desc"
                        },
                        "name": "desc"
                      },
                      {
                        "type": "Identifier",
                        "start": 2024,
                        "end": 2030,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 65
                          },
                          "end": {
                            "line": 99,
                            "column": 71
                          },
                          "identifierName": "params"
                        },
                        "name": "params"
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "start": 2032,
                      "end": 2233,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 73
                        },
                        "end": {
                          "line": 106,
                          "column": 1
                        }
                      },
                      "body": [
                        {
                          "type": "IfStatement",
                          "start": 2036,
                          "end": 2154,
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 2
                            },
                            "end": {
                              "line": 102,
                              "column": 3
                            }
                          },
                          "test": {
                            "type": "UnaryExpression",
                            "start": 2040,
                            "end": 2054,
                            "loc": {
                              "start": {
                                "line": 100,
                                "column": 6
                              },
                              "end": {
                                "line": 100,
                                "column": 20
                              }
                            },
                            "operator": "!",
                            "prefix": true,
                            "argument": {
                              "type": "MemberExpression",
                              "start": 2041,
                              "end": 2054,
                              "loc": {
                                "start": {
                                  "line": 100,
                                  "column": 7
                                },
                                "end": {
                                  "line": 100,
                                  "column": 20
                                }
                              },
                              "object": {
                                "type": "Identifier",
                                "start": 2041,
                                "end": 2045,
                                "loc": {
                                  "start": {
                                    "line": 100,
                                    "column": 7
                                  },
                                  "end": {
                                    "line": 100,
                                    "column": 11
                                  },
                                  "identifierName": "desc"
                                },
                                "name": "desc"
                              },
                              "property": {
                                "type": "Identifier",
                                "start": 2046,
                                "end": 2054,
                                "loc": {
                                  "start": {
                                    "line": 100,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 100,
                                    "column": 20
                                  },
                                  "identifierName": "writable"
                                },
                                "name": "writable"
                              },
                              "computed": false
                            },
                            "extra": {
                              "parenthesizedArgument": false
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "start": 2056,
                            "end": 2154,
                            "loc": {
                              "start": {
                                "line": 100,
                                "column": 22
                              },
                              "end": {
                                "line": 102,
                                "column": 3
                              }
                            },
                            "body": [
                              {
                                "type": "ThrowStatement",
                                "start": 2062,
                                "end": 2150,
                                "loc": {
                                  "start": {
                                    "line": 101,
                                    "column": 4
                                  },
                                  "end": {
                                    "line": 101,
                                    "column": 92
                                  }
                                },
                                "argument": {
                                  "type": "NewExpression",
                                  "start": 2068,
                                  "end": 2149,
                                  "loc": {
                                    "start": {
                                      "line": 101,
                                      "column": 10
                                    },
                                    "end": {
                                      "line": 101,
                                      "column": 91
                                    }
                                  },
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 2072,
                                    "end": 2077,
                                    "loc": {
                                      "start": {
                                        "line": 101,
                                        "column": 14
                                      },
                                      "end": {
                                        "line": 101,
                                        "column": 19
                                      },
                                      "identifierName": "Error"
                                    },
                                    "name": "Error"
                                  },
                                  "arguments": [
                                    {
                                      "type": "StringLiteral",
                                      "start": 2078,
                                      "end": 2148,
                                      "loc": {
                                        "start": {
                                          "line": 101,
                                          "column": 20
                                        },
                                        "end": {
                                          "line": 101,
                                          "column": 90
                                        }
                                      },
                                      "extra": {
                                        "rawValue": "ember-computed-decorators does not support using getters and setters",
                                        "raw": "'ember-computed-decorators does not support using getters and setters'"
                                      },
                                      "value": "ember-computed-decorators does not support using getters and setters"
                                    }
                                  ]
                                }
                              }
                            ],
                            "directives": []
                          },
                          "alternate": null
                        },
                        {
                          "type": "VariableDeclaration",
                          "start": 2158,
                          "end": 2189,
                          "loc": {
                            "start": {
                              "line": 104,
                              "column": 2
                            },
                            "end": {
                              "line": 104,
                              "column": 33
                            }
                          },
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "start": 2162,
                              "end": 2188,
                              "loc": {
                                "start": {
                                  "line": 104,
                                  "column": 6
                                },
                                "end": {
                                  "line": 104,
                                  "column": 32
                                }
                              },
                              "id": {
                                "type": "Identifier",
                                "start": 2162,
                                "end": 2167,
                                "loc": {
                                  "start": {
                                    "line": 104,
                                    "column": 6
                                  },
                                  "end": {
                                    "line": 104,
                                    "column": 11
                                  },
                                  "identifierName": "value"
                                },
                                "name": "value"
                              },
                              "init": {
                                "type": "CallExpression",
                                "start": 2170,
                                "end": 2188,
                                "loc": {
                                  "start": {
                                    "line": 104,
                                    "column": 14
                                  },
                                  "end": {
                                    "line": 104,
                                    "column": 32
                                  }
                                },
                                "callee": {
                                  "type": "Identifier",
                                  "start": 2170,
                                  "end": 2182,
                                  "loc": {
                                    "start": {
                                      "line": 104,
                                      "column": 14
                                    },
                                    "end": {
                                      "line": 104,
                                      "column": 26
                                    },
                                    "identifierName": "extractValue"
                                  },
                                  "name": "extractValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "start": 2183,
                                    "end": 2187,
                                    "loc": {
                                      "start": {
                                        "line": 104,
                                        "column": 27
                                      },
                                      "end": {
                                        "line": 104,
                                        "column": 31
                                      },
                                      "identifierName": "desc"
                                    },
                                    "name": "desc"
                                  }
                                ]
                              }
                            }
                          ],
                          "kind": "let"
                        },
                        {
                          "type": "ReturnStatement",
                          "start": 2192,
                          "end": 2231,
                          "loc": {
                            "start": {
                              "line": 105,
                              "column": 2
                            },
                            "end": {
                              "line": 105,
                              "column": 41
                            }
                          },
                          "argument": {
                            "type": "CallExpression",
                            "start": 2199,
                            "end": 2230,
                            "loc": {
                              "start": {
                                "line": 105,
                                "column": 9
                              },
                              "end": {
                                "line": 105,
                                "column": 40
                              }
                            },
                            "callee": {
                              "type": "Identifier",
                              "start": 2199,
                              "end": 2212,
                              "loc": {
                                "start": {
                                  "line": 105,
                                  "column": 9
                                },
                                "end": {
                                  "line": 105,
                                  "column": 22
                                },
                                "identifierName": "computedMacro"
                              },
                              "name": "computedMacro"
                            },
                            "arguments": [
                              {
                                "type": "SpreadElement",
                                "start": 2213,
                                "end": 2222,
                                "loc": {
                                  "start": {
                                    "line": 105,
                                    "column": 23
                                  },
                                  "end": {
                                    "line": 105,
                                    "column": 32
                                  }
                                },
                                "argument": {
                                  "type": "Identifier",
                                  "start": 2216,
                                  "end": 2222,
                                  "loc": {
                                    "start": {
                                      "line": 105,
                                      "column": 26
                                    },
                                    "end": {
                                      "line": 105,
                                      "column": 32
                                    },
                                    "identifierName": "params"
                                  },
                                  "name": "params"
                                }
                              },
                              {
                                "type": "Identifier",
                                "start": 2224,
                                "end": 2229,
                                "loc": {
                                  "start": {
                                    "line": 105,
                                    "column": 34
                                  },
                                  "end": {
                                    "line": 105,
                                    "column": 39
                                  },
                                  "identifierName": "value"
                                },
                                "name": "value"
                              }
                            ]
                          }
                        }
                      ],
                      "directives": []
                    }
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that turns a function into a computed property.\n *\n * In your application where you would normally have:\n *\n * ```javascript\n * foo: Ember.computed('someKey', 'otherKey', function() {\n *   var someKey = this.get('someKey');\n *   var otherKey = this.get('otherKey');\n *\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed('someKey', 'otherKey')\n * foo(someKey, otherKey) {\n *   // Do Stuff\n * }\n * ```\n *\n * #### Without Dependent Keys\n *\n * ```javascript\n * foo: Ember.computed(function() {\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed\n * foo() {\n *   // Do Stuff\n * }\n * ```\n *\n * #### \"Real World\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n *\n * #### \"Real World get/set syntax\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name: {\n *     get(first, last) {\n *       return `${first} ${last}`;\n *     },\n *\n *     set(value, first, last) {\n *       // ...\n *     }\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} propertyNames - List of property keys this computed is dependent on\n ",
              "start": 332,
              "end": 1958,
              "loc": {
                "start": {
                  "line": 15,
                  "column": 0
                },
                "end": {
                  "line": 98,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that modifies a computed property to be read only.\n *\n * Usage:\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed, { readOnly } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @readOnly\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n * @function\n ",
              "start": 2263,
              "end": 2653,
              "loc": {
                "start": {
                  "line": 110,
                  "column": 0
                },
                "end": {
                  "line": 129,
                  "column": 3
                }
              }
            }
          ]
        },
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that modifies a computed property to be read only.\n *\n * Usage:\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed, { readOnly } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @readOnly\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n * @function\n ",
            "start": 2263,
            "end": 2653,
            "loc": {
              "start": {
                "line": 110,
                "column": 0
              },
              "end": {
                "line": 129,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that turns a function into a computed property.\n *\n * In your application where you would normally have:\n *\n * ```javascript\n * foo: Ember.computed('someKey', 'otherKey', function() {\n *   var someKey = this.get('someKey');\n *   var otherKey = this.get('otherKey');\n *\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed('someKey', 'otherKey')\n * foo(someKey, otherKey) {\n *   // Do Stuff\n * }\n * ```\n *\n * #### Without Dependent Keys\n *\n * ```javascript\n * foo: Ember.computed(function() {\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed\n * foo() {\n *   // Do Stuff\n * }\n * ```\n *\n * #### \"Real World\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n *\n * #### \"Real World get/set syntax\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name: {\n *     get(first, last) {\n *       return `${first} ${last}`;\n *     },\n *\n *     set(value, first, last) {\n *       // ...\n *     }\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} propertyNames - List of property keys this computed is dependent on\n ",
      "start": 332,
      "end": 1958,
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that modifies a computed property to be read only.\n *\n * Usage:\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed, { readOnly } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @readOnly\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n * @function\n ",
      "start": 2263,
      "end": 2653,
      "loc": {
        "start": {
          "line": 110,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.on](https://emberjs.com/api/#method_on)\n *\n * Triggers the target function on events\n *\n * ```javascript\n * import Ember from 'ember';\n * import { on } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @on('init')\n *   setupStuff() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
      "start": 2785,
      "end": 3223,
      "loc": {
        "start": {
          "line": 135,
          "column": 0
        },
        "end": {
          "line": 154,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.observer](https://emberjs.com/api/#method_observer)\n *\n * Triggers the target function when the dependent properties have changed\n *\n * ```javascript\n * import Ember from 'ember';\n * import { observes } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @observes('foo')\n *   bar() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
      "start": 3317,
      "end": 3804,
      "loc": {
        "start": {
          "line": 157,
          "column": 0
        },
        "end": {
          "line": 176,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
      "start": 3918,
      "end": 4545,
      "loc": {
        "start": {
          "line": 179,
          "column": 0
        },
        "end": {
          "line": 201,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
      "start": 4668,
      "end": 5241,
      "loc": {
        "start": {
          "line": 204,
          "column": 0
        },
        "end": {
          "line": 225,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
      "start": 5358,
      "end": 5889,
      "loc": {
        "start": {
          "line": 228,
          "column": 0
        },
        "end": {
          "line": 247,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
      "start": 6009,
      "end": 6607,
      "loc": {
        "start": {
          "line": 250,
          "column": 0
        },
        "end": {
          "line": 270,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
      "start": 6736,
      "end": 7340,
      "loc": {
        "start": {
          "line": 273,
          "column": 0
        },
        "end": {
          "line": 292,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
      "start": 7463,
      "end": 8041,
      "loc": {
        "start": {
          "line": 295,
          "column": 0
        },
        "end": {
          "line": 313,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
      "start": 8164,
      "end": 9025,
      "loc": {
        "start": {
          "line": 316,
          "column": 0
        },
        "end": {
          "line": 341,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
      "start": 9151,
      "end": 9959,
      "loc": {
        "start": {
          "line": 344,
          "column": 0
        },
        "end": {
          "line": 368,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 10091,
      "end": 10687,
      "loc": {
        "start": {
          "line": 371,
          "column": 0
        },
        "end": {
          "line": 391,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 10801,
      "end": 11425,
      "loc": {
        "start": {
          "line": 394,
          "column": 0
        },
        "end": {
          "line": 414,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
      "start": 11542,
      "end": 12214,
      "loc": {
        "start": {
          "line": 417,
          "column": 0
        },
        "end": {
          "line": 437,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 12349,
      "end": 12941,
      "loc": {
        "start": {
          "line": 440,
          "column": 0
        },
        "end": {
          "line": 460,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 13055,
      "end": 13676,
      "loc": {
        "start": {
          "line": 463,
          "column": 0
        },
        "end": {
          "line": 483,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
      "start": 13793,
      "end": 14497,
      "loc": {
        "start": {
          "line": 486,
          "column": 0
        },
        "end": {
          "line": 507,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
      "start": 14614,
      "end": 15282,
      "loc": {
        "start": {
          "line": 510,
          "column": 0
        },
        "end": {
          "line": 533,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
      "start": 15405,
      "end": 16098,
      "loc": {
        "start": {
          "line": 536,
          "column": 0
        },
        "end": {
          "line": 557,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 16221,
      "end": 16817,
      "loc": {
        "start": {
          "line": 560,
          "column": 0
        },
        "end": {
          "line": 579,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 16934,
      "end": 17528,
      "loc": {
        "start": {
          "line": 582,
          "column": 0
        },
        "end": {
          "line": 601,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 17645,
      "end": 18309,
      "loc": {
        "start": {
          "line": 604,
          "column": 0
        },
        "end": {
          "line": 624,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
      "start": 18429,
      "end": 18971,
      "loc": {
        "start": {
          "line": 627,
          "column": 0
        },
        "end": {
          "line": 646,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 19088,
      "end": 19726,
      "loc": {
        "start": {
          "line": 649,
          "column": 0
        },
        "end": {
          "line": 668,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
      "start": 19858,
      "end": 20665,
      "loc": {
        "start": {
          "line": 671,
          "column": 0
        },
        "end": {
          "line": 693,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
      "start": 20791,
      "end": 21378,
      "loc": {
        "start": {
          "line": 696,
          "column": 0
        },
        "end": {
          "line": 716,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
      "start": 21492,
      "end": 22032,
      "loc": {
        "start": {
          "line": 719,
          "column": 0
        },
        "end": {
          "line": 736,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
      "start": 22155,
      "end": 22901,
      "loc": {
        "start": {
          "line": 739,
          "column": 0
        },
        "end": {
          "line": 760,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
      "start": 23030,
      "end": 24667,
      "loc": {
        "start": {
          "line": 763,
          "column": 0
        },
        "end": {
          "line": 808,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
      "start": 24787,
      "end": 25295,
      "loc": {
        "start": {
          "line": 811,
          "column": 0
        },
        "end": {
          "line": 830,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
      "start": 25412,
      "end": 26055,
      "loc": {
        "start": {
          "line": 833,
          "column": 0
        },
        "end": {
          "line": 852,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
      "start": 26178,
      "end": 26837,
      "loc": {
        "start": {
          "line": 855,
          "column": 0
        },
        "end": {
          "line": 874,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 0,
      "end": 6,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 7,
      "end": 12,
      "loc": {
        "start": {
          "line": 1,
          "column": 7
        },
        "end": {
          "line": 1,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 13,
      "end": 17,
      "loc": {
        "start": {
          "line": 1,
          "column": 13
        },
        "end": {
          "line": 1,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "ember",
      "start": 18,
      "end": 25,
      "loc": {
        "start": {
          "line": 1,
          "column": 18
        },
        "end": {
          "line": 1,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 25,
      "end": 26,
      "loc": {
        "start": {
          "line": 1,
          "column": 25
        },
        "end": {
          "line": 1,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 27,
      "end": 33,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computedMacro",
      "start": 34,
      "end": 47,
      "loc": {
        "start": {
          "line": 2,
          "column": 7
        },
        "end": {
          "line": 2,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 48,
      "end": 52,
      "loc": {
        "start": {
          "line": 2,
          "column": 21
        },
        "end": {
          "line": 2,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "ember-macro-helpers/computed",
      "start": 53,
      "end": 83,
      "loc": {
        "start": {
          "line": 2,
          "column": 26
        },
        "end": {
          "line": 2,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 83,
      "end": 84,
      "loc": {
        "start": {
          "line": 2,
          "column": 56
        },
        "end": {
          "line": 2,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 86,
      "end": 92,
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "extractValue",
      "start": 93,
      "end": 105,
      "loc": {
        "start": {
          "line": 4,
          "column": 7
        },
        "end": {
          "line": 4,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 106,
      "end": 110,
      "loc": {
        "start": {
          "line": 4,
          "column": 20
        },
        "end": {
          "line": 4,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "./utils/extract-value",
      "start": 111,
      "end": 134,
      "loc": {
        "start": {
          "line": 4,
          "column": 25
        },
        "end": {
          "line": 4,
          "column": 48
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 134,
      "end": 135,
      "loc": {
        "start": {
          "line": 4,
          "column": 48
        },
        "end": {
          "line": 4,
          "column": 49
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 136,
      "end": 142,
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 143,
      "end": 144,
      "loc": {
        "start": {
          "line": 5,
          "column": 7
        },
        "end": {
          "line": 5,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decorator",
      "start": 147,
      "end": 156,
      "loc": {
        "start": {
          "line": 6,
          "column": 2
        },
        "end": {
          "line": 6,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 156,
      "end": 157,
      "loc": {
        "start": {
          "line": 6,
          "column": 11
        },
        "end": {
          "line": 6,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratorWithParams",
      "start": 160,
      "end": 179,
      "loc": {
        "start": {
          "line": 7,
          "column": 2
        },
        "end": {
          "line": 7,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 180,
      "end": 181,
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 182,
      "end": 186,
      "loc": {
        "start": {
          "line": 8,
          "column": 2
        },
        "end": {
          "line": 8,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "./utils/decorator-wrappers",
      "start": 187,
      "end": 215,
      "loc": {
        "start": {
          "line": 8,
          "column": 7
        },
        "end": {
          "line": 8,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 215,
      "end": 216,
      "loc": {
        "start": {
          "line": 8,
          "column": 35
        },
        "end": {
          "line": 8,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 218,
      "end": 224,
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 225,
      "end": 226,
      "loc": {
        "start": {
          "line": 10,
          "column": 7
        },
        "end": {
          "line": 10,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratorWithRequiredParams",
      "start": 229,
      "end": 256,
      "loc": {
        "start": {
          "line": 11,
          "column": 2
        },
        "end": {
          "line": 11,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 256,
      "end": 257,
      "loc": {
        "start": {
          "line": 11,
          "column": 29
        },
        "end": {
          "line": 11,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 260,
      "end": 295,
      "loc": {
        "start": {
          "line": 12,
          "column": 2
        },
        "end": {
          "line": 12,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 296,
      "end": 297,
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 298,
      "end": 302,
      "loc": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 13,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "./utils/decorator-macros",
      "start": 303,
      "end": 329,
      "loc": {
        "start": {
          "line": 13,
          "column": 7
        },
        "end": {
          "line": 13,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 329,
      "end": 330,
      "loc": {
        "start": {
          "line": 13,
          "column": 33
        },
        "end": {
          "line": 13,
          "column": 34
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that turns a function into a computed property.\n *\n * In your application where you would normally have:\n *\n * ```javascript\n * foo: Ember.computed('someKey', 'otherKey', function() {\n *   var someKey = this.get('someKey');\n *   var otherKey = this.get('otherKey');\n *\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed('someKey', 'otherKey')\n * foo(someKey, otherKey) {\n *   // Do Stuff\n * }\n * ```\n *\n * #### Without Dependent Keys\n *\n * ```javascript\n * foo: Ember.computed(function() {\n *   // Do Stuff\n * })\n * ```\n *\n * You replace with this:\n *\n * ```javascript\n * import computed from 'ember-computed-decorators';\n *\n * // ..... <snip> .....\n * @computed\n * foo() {\n *   // Do Stuff\n * }\n * ```\n *\n * #### \"Real World\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n *\n * #### \"Real World get/set syntax\"\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @computed('first', 'last')\n *   name: {\n *     get(first, last) {\n *       return `${first} ${last}`;\n *     },\n *\n *     set(value, first, last) {\n *       // ...\n *     }\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} propertyNames - List of property keys this computed is dependent on\n ",
      "start": 332,
      "end": 1958,
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 1959,
      "end": 1964,
      "loc": {
        "start": {
          "line": 99,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 1965,
      "end": 1973,
      "loc": {
        "start": {
          "line": 99,
          "column": 6
        },
        "end": {
          "line": 99,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 1974,
      "end": 1975,
      "loc": {
        "start": {
          "line": 99,
          "column": 15
        },
        "end": {
          "line": 99,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratorWithParams",
      "start": 1976,
      "end": 1995,
      "loc": {
        "start": {
          "line": 99,
          "column": 17
        },
        "end": {
          "line": 99,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1995,
      "end": 1996,
      "loc": {
        "start": {
          "line": 99,
          "column": 36
        },
        "end": {
          "line": 99,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 1996,
      "end": 2004,
      "loc": {
        "start": {
          "line": 99,
          "column": 37
        },
        "end": {
          "line": 99,
          "column": 45
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2004,
      "end": 2005,
      "loc": {
        "start": {
          "line": 99,
          "column": 45
        },
        "end": {
          "line": 99,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "target",
      "start": 2005,
      "end": 2011,
      "loc": {
        "start": {
          "line": 99,
          "column": 46
        },
        "end": {
          "line": 99,
          "column": 52
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2011,
      "end": 2012,
      "loc": {
        "start": {
          "line": 99,
          "column": 52
        },
        "end": {
          "line": 99,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "key",
      "start": 2013,
      "end": 2016,
      "loc": {
        "start": {
          "line": 99,
          "column": 54
        },
        "end": {
          "line": 99,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2016,
      "end": 2017,
      "loc": {
        "start": {
          "line": 99,
          "column": 57
        },
        "end": {
          "line": 99,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "desc",
      "start": 2018,
      "end": 2022,
      "loc": {
        "start": {
          "line": 99,
          "column": 59
        },
        "end": {
          "line": 99,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2022,
      "end": 2023,
      "loc": {
        "start": {
          "line": 99,
          "column": 63
        },
        "end": {
          "line": 99,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "params",
      "start": 2024,
      "end": 2030,
      "loc": {
        "start": {
          "line": 99,
          "column": 65
        },
        "end": {
          "line": 99,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2030,
      "end": 2031,
      "loc": {
        "start": {
          "line": 99,
          "column": 71
        },
        "end": {
          "line": 99,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2032,
      "end": 2033,
      "loc": {
        "start": {
          "line": 99,
          "column": 73
        },
        "end": {
          "line": 99,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "if",
        "keyword": "if",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "if",
      "start": 2036,
      "end": 2038,
      "loc": {
        "start": {
          "line": 100,
          "column": 2
        },
        "end": {
          "line": 100,
          "column": 4
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2039,
      "end": 2040,
      "loc": {
        "start": {
          "line": 100,
          "column": 5
        },
        "end": {
          "line": 100,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "prefix",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": true,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "!",
      "start": 2040,
      "end": 2041,
      "loc": {
        "start": {
          "line": 100,
          "column": 6
        },
        "end": {
          "line": 100,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "desc",
      "start": 2041,
      "end": 2045,
      "loc": {
        "start": {
          "line": 100,
          "column": 7
        },
        "end": {
          "line": 100,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2045,
      "end": 2046,
      "loc": {
        "start": {
          "line": 100,
          "column": 11
        },
        "end": {
          "line": 100,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "writable",
      "start": 2046,
      "end": 2054,
      "loc": {
        "start": {
          "line": 100,
          "column": 12
        },
        "end": {
          "line": 100,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2054,
      "end": 2055,
      "loc": {
        "start": {
          "line": 100,
          "column": 20
        },
        "end": {
          "line": 100,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2056,
      "end": 2057,
      "loc": {
        "start": {
          "line": 100,
          "column": 22
        },
        "end": {
          "line": 100,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "throw",
        "keyword": "throw",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "throw",
      "start": 2062,
      "end": 2067,
      "loc": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "new",
        "keyword": "new",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "new",
      "start": 2068,
      "end": 2071,
      "loc": {
        "start": {
          "line": 101,
          "column": 10
        },
        "end": {
          "line": 101,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Error",
      "start": 2072,
      "end": 2077,
      "loc": {
        "start": {
          "line": 101,
          "column": 14
        },
        "end": {
          "line": 101,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2077,
      "end": 2078,
      "loc": {
        "start": {
          "line": 101,
          "column": 19
        },
        "end": {
          "line": 101,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "ember-computed-decorators does not support using getters and setters",
      "start": 2078,
      "end": 2148,
      "loc": {
        "start": {
          "line": 101,
          "column": 20
        },
        "end": {
          "line": 101,
          "column": 90
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2148,
      "end": 2149,
      "loc": {
        "start": {
          "line": 101,
          "column": 90
        },
        "end": {
          "line": 101,
          "column": 91
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2149,
      "end": 2150,
      "loc": {
        "start": {
          "line": 101,
          "column": 91
        },
        "end": {
          "line": 101,
          "column": 92
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2153,
      "end": 2154,
      "loc": {
        "start": {
          "line": 102,
          "column": 2
        },
        "end": {
          "line": 102,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "let",
        "keyword": "let",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "let",
      "start": 2158,
      "end": 2161,
      "loc": {
        "start": {
          "line": 104,
          "column": 2
        },
        "end": {
          "line": 104,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "value",
      "start": 2162,
      "end": 2167,
      "loc": {
        "start": {
          "line": 104,
          "column": 6
        },
        "end": {
          "line": 104,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2168,
      "end": 2169,
      "loc": {
        "start": {
          "line": 104,
          "column": 12
        },
        "end": {
          "line": 104,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "extractValue",
      "start": 2170,
      "end": 2182,
      "loc": {
        "start": {
          "line": 104,
          "column": 14
        },
        "end": {
          "line": 104,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2182,
      "end": 2183,
      "loc": {
        "start": {
          "line": 104,
          "column": 26
        },
        "end": {
          "line": 104,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "desc",
      "start": 2183,
      "end": 2187,
      "loc": {
        "start": {
          "line": 104,
          "column": 27
        },
        "end": {
          "line": 104,
          "column": 31
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2187,
      "end": 2188,
      "loc": {
        "start": {
          "line": 104,
          "column": 31
        },
        "end": {
          "line": 104,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2188,
      "end": 2189,
      "loc": {
        "start": {
          "line": 104,
          "column": 32
        },
        "end": {
          "line": 104,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 2192,
      "end": 2198,
      "loc": {
        "start": {
          "line": 105,
          "column": 2
        },
        "end": {
          "line": 105,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computedMacro",
      "start": 2199,
      "end": 2212,
      "loc": {
        "start": {
          "line": 105,
          "column": 9
        },
        "end": {
          "line": 105,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2212,
      "end": 2213,
      "loc": {
        "start": {
          "line": 105,
          "column": 22
        },
        "end": {
          "line": 105,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "...",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2213,
      "end": 2216,
      "loc": {
        "start": {
          "line": 105,
          "column": 23
        },
        "end": {
          "line": 105,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "params",
      "start": 2216,
      "end": 2222,
      "loc": {
        "start": {
          "line": 105,
          "column": 26
        },
        "end": {
          "line": 105,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2222,
      "end": 2223,
      "loc": {
        "start": {
          "line": 105,
          "column": 32
        },
        "end": {
          "line": 105,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "value",
      "start": 2224,
      "end": 2229,
      "loc": {
        "start": {
          "line": 105,
          "column": 34
        },
        "end": {
          "line": 105,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2229,
      "end": 2230,
      "loc": {
        "start": {
          "line": 105,
          "column": 39
        },
        "end": {
          "line": 105,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2230,
      "end": 2231,
      "loc": {
        "start": {
          "line": 105,
          "column": 40
        },
        "end": {
          "line": 105,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2232,
      "end": 2233,
      "loc": {
        "start": {
          "line": 106,
          "column": 0
        },
        "end": {
          "line": 106,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2233,
      "end": 2234,
      "loc": {
        "start": {
          "line": 106,
          "column": 1
        },
        "end": {
          "line": 106,
          "column": 2
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2234,
      "end": 2235,
      "loc": {
        "start": {
          "line": 106,
          "column": 2
        },
        "end": {
          "line": 106,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 2237,
      "end": 2243,
      "loc": {
        "start": {
          "line": 108,
          "column": 0
        },
        "end": {
          "line": 108,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "default",
        "keyword": "default",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "default",
      "start": 2244,
      "end": 2251,
      "loc": {
        "start": {
          "line": 108,
          "column": 7
        },
        "end": {
          "line": 108,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 2252,
      "end": 2260,
      "loc": {
        "start": {
          "line": 108,
          "column": 15
        },
        "end": {
          "line": 108,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2260,
      "end": 2261,
      "loc": {
        "start": {
          "line": 108,
          "column": 23
        },
        "end": {
          "line": 108,
          "column": 24
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that modifies a computed property to be read only.\n *\n * Usage:\n *\n * ```javascript\n * import Ember from 'ember';\n * import computed, { readOnly } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @readOnly\n *   @computed('first', 'last')\n *   name(first, last) {\n *     return `${first} ${last}`;\n *   }\n * });\n * ```\n *\n * @function\n ",
      "start": 2263,
      "end": 2653,
      "loc": {
        "start": {
          "line": 110,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 2654,
      "end": 2660,
      "loc": {
        "start": {
          "line": 130,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 2661,
      "end": 2666,
      "loc": {
        "start": {
          "line": 130,
          "column": 7
        },
        "end": {
          "line": 130,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "readOnly",
      "start": 2667,
      "end": 2675,
      "loc": {
        "start": {
          "line": 130,
          "column": 13
        },
        "end": {
          "line": 130,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2676,
      "end": 2677,
      "loc": {
        "start": {
          "line": 130,
          "column": 22
        },
        "end": {
          "line": 130,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decorator",
      "start": 2678,
      "end": 2687,
      "loc": {
        "start": {
          "line": 130,
          "column": 24
        },
        "end": {
          "line": 130,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2687,
      "end": 2688,
      "loc": {
        "start": {
          "line": 130,
          "column": 33
        },
        "end": {
          "line": 130,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 2688,
      "end": 2696,
      "loc": {
        "start": {
          "line": 130,
          "column": 34
        },
        "end": {
          "line": 130,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2696,
      "end": 2697,
      "loc": {
        "start": {
          "line": 130,
          "column": 42
        },
        "end": {
          "line": 130,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "target",
      "start": 2697,
      "end": 2703,
      "loc": {
        "start": {
          "line": 130,
          "column": 43
        },
        "end": {
          "line": 130,
          "column": 49
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2703,
      "end": 2704,
      "loc": {
        "start": {
          "line": 130,
          "column": 49
        },
        "end": {
          "line": 130,
          "column": 50
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 2705,
      "end": 2709,
      "loc": {
        "start": {
          "line": 130,
          "column": 51
        },
        "end": {
          "line": 130,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2709,
      "end": 2710,
      "loc": {
        "start": {
          "line": 130,
          "column": 55
        },
        "end": {
          "line": 130,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "desc",
      "start": 2711,
      "end": 2715,
      "loc": {
        "start": {
          "line": 130,
          "column": 57
        },
        "end": {
          "line": 130,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2715,
      "end": 2716,
      "loc": {
        "start": {
          "line": 130,
          "column": 61
        },
        "end": {
          "line": 130,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2717,
      "end": 2718,
      "loc": {
        "start": {
          "line": 130,
          "column": 63
        },
        "end": {
          "line": 130,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "var",
        "keyword": "var",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "var",
      "start": 2721,
      "end": 2724,
      "loc": {
        "start": {
          "line": 131,
          "column": 2
        },
        "end": {
          "line": 131,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "value",
      "start": 2725,
      "end": 2730,
      "loc": {
        "start": {
          "line": 131,
          "column": 6
        },
        "end": {
          "line": 131,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2731,
      "end": 2732,
      "loc": {
        "start": {
          "line": 131,
          "column": 12
        },
        "end": {
          "line": 131,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "extractValue",
      "start": 2733,
      "end": 2745,
      "loc": {
        "start": {
          "line": 131,
          "column": 14
        },
        "end": {
          "line": 131,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2745,
      "end": 2746,
      "loc": {
        "start": {
          "line": 131,
          "column": 26
        },
        "end": {
          "line": 131,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "desc",
      "start": 2746,
      "end": 2750,
      "loc": {
        "start": {
          "line": 131,
          "column": 27
        },
        "end": {
          "line": 131,
          "column": 31
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2750,
      "end": 2751,
      "loc": {
        "start": {
          "line": 131,
          "column": 31
        },
        "end": {
          "line": 131,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2751,
      "end": 2752,
      "loc": {
        "start": {
          "line": 131,
          "column": 32
        },
        "end": {
          "line": 131,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 2755,
      "end": 2761,
      "loc": {
        "start": {
          "line": 132,
          "column": 2
        },
        "end": {
          "line": 132,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "value",
      "start": 2762,
      "end": 2767,
      "loc": {
        "start": {
          "line": 132,
          "column": 9
        },
        "end": {
          "line": 132,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2767,
      "end": 2768,
      "loc": {
        "start": {
          "line": 132,
          "column": 14
        },
        "end": {
          "line": 132,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "readOnly",
      "start": 2768,
      "end": 2776,
      "loc": {
        "start": {
          "line": 132,
          "column": 15
        },
        "end": {
          "line": 132,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2776,
      "end": 2777,
      "loc": {
        "start": {
          "line": 132,
          "column": 23
        },
        "end": {
          "line": 132,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2777,
      "end": 2778,
      "loc": {
        "start": {
          "line": 132,
          "column": 24
        },
        "end": {
          "line": 132,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2778,
      "end": 2779,
      "loc": {
        "start": {
          "line": 132,
          "column": 25
        },
        "end": {
          "line": 132,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2780,
      "end": 2781,
      "loc": {
        "start": {
          "line": 133,
          "column": 0
        },
        "end": {
          "line": 133,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2781,
      "end": 2782,
      "loc": {
        "start": {
          "line": 133,
          "column": 1
        },
        "end": {
          "line": 133,
          "column": 2
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2782,
      "end": 2783,
      "loc": {
        "start": {
          "line": 133,
          "column": 2
        },
        "end": {
          "line": 133,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.on](https://emberjs.com/api/#method_on)\n *\n * Triggers the target function on events\n *\n * ```javascript\n * import Ember from 'ember';\n * import { on } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @on('init')\n *   setupStuff() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
      "start": 2785,
      "end": 3223,
      "loc": {
        "start": {
          "line": 135,
          "column": 0
        },
        "end": {
          "line": 154,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 3224,
      "end": 3230,
      "loc": {
        "start": {
          "line": 155,
          "column": 0
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 3231,
      "end": 3236,
      "loc": {
        "start": {
          "line": 155,
          "column": 7
        },
        "end": {
          "line": 155,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "on",
      "start": 3237,
      "end": 3239,
      "loc": {
        "start": {
          "line": 155,
          "column": 13
        },
        "end": {
          "line": 155,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 3240,
      "end": 3241,
      "loc": {
        "start": {
          "line": 155,
          "column": 16
        },
        "end": {
          "line": 155,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratorWithRequiredParams",
      "start": 3242,
      "end": 3269,
      "loc": {
        "start": {
          "line": 155,
          "column": 18
        },
        "end": {
          "line": 155,
          "column": 45
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3269,
      "end": 3270,
      "loc": {
        "start": {
          "line": 155,
          "column": 45
        },
        "end": {
          "line": 155,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 3270,
      "end": 3275,
      "loc": {
        "start": {
          "line": 155,
          "column": 46
        },
        "end": {
          "line": 155,
          "column": 51
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3275,
      "end": 3276,
      "loc": {
        "start": {
          "line": 155,
          "column": 51
        },
        "end": {
          "line": 155,
          "column": 52
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "on",
      "start": 3276,
      "end": 3278,
      "loc": {
        "start": {
          "line": 155,
          "column": 52
        },
        "end": {
          "line": 155,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3278,
      "end": 3279,
      "loc": {
        "start": {
          "line": 155,
          "column": 54
        },
        "end": {
          "line": 155,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot `on` without event names",
      "start": 3280,
      "end": 3313,
      "loc": {
        "start": {
          "line": 155,
          "column": 56
        },
        "end": {
          "line": 155,
          "column": 89
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3313,
      "end": 3314,
      "loc": {
        "start": {
          "line": 155,
          "column": 89
        },
        "end": {
          "line": 155,
          "column": 90
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3314,
      "end": 3315,
      "loc": {
        "start": {
          "line": 155,
          "column": 90
        },
        "end": {
          "line": 155,
          "column": 91
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.observer](https://emberjs.com/api/#method_observer)\n *\n * Triggers the target function when the dependent properties have changed\n *\n * ```javascript\n * import Ember from 'ember';\n * import { observes } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @observes('foo')\n *   bar() {\n *     //...\n *   }\n * });\n * ```\n *\n * @function\n * @param {...String} eventNames - Names of the events that trigger the function\n ",
      "start": 3317,
      "end": 3804,
      "loc": {
        "start": {
          "line": 157,
          "column": 0
        },
        "end": {
          "line": 176,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 3805,
      "end": 3811,
      "loc": {
        "start": {
          "line": 177,
          "column": 0
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 3812,
      "end": 3817,
      "loc": {
        "start": {
          "line": 177,
          "column": 7
        },
        "end": {
          "line": 177,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "observes",
      "start": 3818,
      "end": 3826,
      "loc": {
        "start": {
          "line": 177,
          "column": 13
        },
        "end": {
          "line": 177,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 3827,
      "end": 3828,
      "loc": {
        "start": {
          "line": 177,
          "column": 22
        },
        "end": {
          "line": 177,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratorWithRequiredParams",
      "start": 3829,
      "end": 3856,
      "loc": {
        "start": {
          "line": 177,
          "column": 24
        },
        "end": {
          "line": 177,
          "column": 51
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3856,
      "end": 3857,
      "loc": {
        "start": {
          "line": 177,
          "column": 51
        },
        "end": {
          "line": 177,
          "column": 52
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 3857,
      "end": 3862,
      "loc": {
        "start": {
          "line": 177,
          "column": 52
        },
        "end": {
          "line": 177,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3862,
      "end": 3863,
      "loc": {
        "start": {
          "line": 177,
          "column": 57
        },
        "end": {
          "line": 177,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "observer",
      "start": 3863,
      "end": 3871,
      "loc": {
        "start": {
          "line": 177,
          "column": 58
        },
        "end": {
          "line": 177,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3871,
      "end": 3872,
      "loc": {
        "start": {
          "line": 177,
          "column": 66
        },
        "end": {
          "line": 177,
          "column": 67
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot `observe` without property names",
      "start": 3873,
      "end": 3914,
      "loc": {
        "start": {
          "line": 177,
          "column": 68
        },
        "end": {
          "line": 177,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3914,
      "end": 3915,
      "loc": {
        "start": {
          "line": 177,
          "column": 109
        },
        "end": {
          "line": 177,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3915,
      "end": 3916,
      "loc": {
        "start": {
          "line": 177,
          "column": 110
        },
        "end": {
          "line": 177,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
      "start": 3918,
      "end": 4545,
      "loc": {
        "start": {
          "line": 179,
          "column": 0
        },
        "end": {
          "line": 201,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 4546,
      "end": 4552,
      "loc": {
        "start": {
          "line": 202,
          "column": 0
        },
        "end": {
          "line": 202,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 4553,
      "end": 4558,
      "loc": {
        "start": {
          "line": 202,
          "column": 7
        },
        "end": {
          "line": 202,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "alias",
      "start": 4559,
      "end": 4564,
      "loc": {
        "start": {
          "line": 202,
          "column": 13
        },
        "end": {
          "line": 202,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 4565,
      "end": 4566,
      "loc": {
        "start": {
          "line": 202,
          "column": 19
        },
        "end": {
          "line": 202,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 4567,
      "end": 4602,
      "loc": {
        "start": {
          "line": 202,
          "column": 21
        },
        "end": {
          "line": 202,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4602,
      "end": 4603,
      "loc": {
        "start": {
          "line": 202,
          "column": 56
        },
        "end": {
          "line": 202,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 4603,
      "end": 4608,
      "loc": {
        "start": {
          "line": 202,
          "column": 57
        },
        "end": {
          "line": 202,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4608,
      "end": 4609,
      "loc": {
        "start": {
          "line": 202,
          "column": 62
        },
        "end": {
          "line": 202,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 4609,
      "end": 4617,
      "loc": {
        "start": {
          "line": 202,
          "column": 63
        },
        "end": {
          "line": 202,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4617,
      "end": 4618,
      "loc": {
        "start": {
          "line": 202,
          "column": 71
        },
        "end": {
          "line": 202,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "alias",
      "start": 4618,
      "end": 4623,
      "loc": {
        "start": {
          "line": 202,
          "column": 72
        },
        "end": {
          "line": 202,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4623,
      "end": 4624,
      "loc": {
        "start": {
          "line": 202,
          "column": 77
        },
        "end": {
          "line": 202,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `alias` without parameters",
      "start": 4625,
      "end": 4664,
      "loc": {
        "start": {
          "line": 202,
          "column": 79
        },
        "end": {
          "line": 202,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4664,
      "end": 4665,
      "loc": {
        "start": {
          "line": 202,
          "column": 118
        },
        "end": {
          "line": 202,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4665,
      "end": 4666,
      "loc": {
        "start": {
          "line": 202,
          "column": 119
        },
        "end": {
          "line": 202,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
      "start": 4668,
      "end": 5241,
      "loc": {
        "start": {
          "line": 204,
          "column": 0
        },
        "end": {
          "line": 225,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 5242,
      "end": 5248,
      "loc": {
        "start": {
          "line": 226,
          "column": 0
        },
        "end": {
          "line": 226,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 5249,
      "end": 5254,
      "loc": {
        "start": {
          "line": 226,
          "column": 7
        },
        "end": {
          "line": 226,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "and",
      "start": 5255,
      "end": 5258,
      "loc": {
        "start": {
          "line": 226,
          "column": 13
        },
        "end": {
          "line": 226,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 5259,
      "end": 5260,
      "loc": {
        "start": {
          "line": 226,
          "column": 17
        },
        "end": {
          "line": 226,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 5261,
      "end": 5296,
      "loc": {
        "start": {
          "line": 226,
          "column": 19
        },
        "end": {
          "line": 226,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5296,
      "end": 5297,
      "loc": {
        "start": {
          "line": 226,
          "column": 54
        },
        "end": {
          "line": 226,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 5297,
      "end": 5302,
      "loc": {
        "start": {
          "line": 226,
          "column": 55
        },
        "end": {
          "line": 226,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5302,
      "end": 5303,
      "loc": {
        "start": {
          "line": 226,
          "column": 60
        },
        "end": {
          "line": 226,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 5303,
      "end": 5311,
      "loc": {
        "start": {
          "line": 226,
          "column": 61
        },
        "end": {
          "line": 226,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5311,
      "end": 5312,
      "loc": {
        "start": {
          "line": 226,
          "column": 69
        },
        "end": {
          "line": 226,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "and",
      "start": 5312,
      "end": 5315,
      "loc": {
        "start": {
          "line": 226,
          "column": 70
        },
        "end": {
          "line": 226,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5315,
      "end": 5316,
      "loc": {
        "start": {
          "line": 226,
          "column": 73
        },
        "end": {
          "line": 226,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `and` without parameters",
      "start": 5317,
      "end": 5354,
      "loc": {
        "start": {
          "line": 226,
          "column": 75
        },
        "end": {
          "line": 226,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5354,
      "end": 5355,
      "loc": {
        "start": {
          "line": 226,
          "column": 112
        },
        "end": {
          "line": 226,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5355,
      "end": 5356,
      "loc": {
        "start": {
          "line": 226,
          "column": 113
        },
        "end": {
          "line": 226,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
      "start": 5358,
      "end": 5889,
      "loc": {
        "start": {
          "line": 228,
          "column": 0
        },
        "end": {
          "line": 247,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 5890,
      "end": 5896,
      "loc": {
        "start": {
          "line": 248,
          "column": 0
        },
        "end": {
          "line": 248,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 5897,
      "end": 5902,
      "loc": {
        "start": {
          "line": 248,
          "column": 7
        },
        "end": {
          "line": 248,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bool",
      "start": 5903,
      "end": 5907,
      "loc": {
        "start": {
          "line": 248,
          "column": 13
        },
        "end": {
          "line": 248,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 5908,
      "end": 5909,
      "loc": {
        "start": {
          "line": 248,
          "column": 18
        },
        "end": {
          "line": 248,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 5910,
      "end": 5945,
      "loc": {
        "start": {
          "line": 248,
          "column": 20
        },
        "end": {
          "line": 248,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5945,
      "end": 5946,
      "loc": {
        "start": {
          "line": 248,
          "column": 55
        },
        "end": {
          "line": 248,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 5946,
      "end": 5951,
      "loc": {
        "start": {
          "line": 248,
          "column": 56
        },
        "end": {
          "line": 248,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5951,
      "end": 5952,
      "loc": {
        "start": {
          "line": 248,
          "column": 61
        },
        "end": {
          "line": 248,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 5952,
      "end": 5960,
      "loc": {
        "start": {
          "line": 248,
          "column": 62
        },
        "end": {
          "line": 248,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5960,
      "end": 5961,
      "loc": {
        "start": {
          "line": 248,
          "column": 70
        },
        "end": {
          "line": 248,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bool",
      "start": 5961,
      "end": 5965,
      "loc": {
        "start": {
          "line": 248,
          "column": 71
        },
        "end": {
          "line": 248,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5965,
      "end": 5966,
      "loc": {
        "start": {
          "line": 248,
          "column": 75
        },
        "end": {
          "line": 248,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `bool` without parameters",
      "start": 5967,
      "end": 6005,
      "loc": {
        "start": {
          "line": 248,
          "column": 77
        },
        "end": {
          "line": 248,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6005,
      "end": 6006,
      "loc": {
        "start": {
          "line": 248,
          "column": 115
        },
        "end": {
          "line": 248,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6006,
      "end": 6007,
      "loc": {
        "start": {
          "line": 248,
          "column": 116
        },
        "end": {
          "line": 248,
          "column": 117
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
      "start": 6009,
      "end": 6607,
      "loc": {
        "start": {
          "line": 250,
          "column": 0
        },
        "end": {
          "line": 270,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 6608,
      "end": 6614,
      "loc": {
        "start": {
          "line": 271,
          "column": 0
        },
        "end": {
          "line": 271,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 6615,
      "end": 6620,
      "loc": {
        "start": {
          "line": 271,
          "column": 7
        },
        "end": {
          "line": 271,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "collect",
      "start": 6621,
      "end": 6628,
      "loc": {
        "start": {
          "line": 271,
          "column": 13
        },
        "end": {
          "line": 271,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 6629,
      "end": 6630,
      "loc": {
        "start": {
          "line": 271,
          "column": 21
        },
        "end": {
          "line": 271,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 6631,
      "end": 6666,
      "loc": {
        "start": {
          "line": 271,
          "column": 23
        },
        "end": {
          "line": 271,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6666,
      "end": 6667,
      "loc": {
        "start": {
          "line": 271,
          "column": 58
        },
        "end": {
          "line": 271,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 6667,
      "end": 6672,
      "loc": {
        "start": {
          "line": 271,
          "column": 59
        },
        "end": {
          "line": 271,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6672,
      "end": 6673,
      "loc": {
        "start": {
          "line": 271,
          "column": 64
        },
        "end": {
          "line": 271,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 6673,
      "end": 6681,
      "loc": {
        "start": {
          "line": 271,
          "column": 65
        },
        "end": {
          "line": 271,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6681,
      "end": 6682,
      "loc": {
        "start": {
          "line": 271,
          "column": 73
        },
        "end": {
          "line": 271,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "collect",
      "start": 6682,
      "end": 6689,
      "loc": {
        "start": {
          "line": 271,
          "column": 74
        },
        "end": {
          "line": 271,
          "column": 81
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6689,
      "end": 6690,
      "loc": {
        "start": {
          "line": 271,
          "column": 81
        },
        "end": {
          "line": 271,
          "column": 82
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `collect` without parameters",
      "start": 6691,
      "end": 6732,
      "loc": {
        "start": {
          "line": 271,
          "column": 83
        },
        "end": {
          "line": 271,
          "column": 124
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6732,
      "end": 6733,
      "loc": {
        "start": {
          "line": 271,
          "column": 124
        },
        "end": {
          "line": 271,
          "column": 125
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6733,
      "end": 6734,
      "loc": {
        "start": {
          "line": 271,
          "column": 125
        },
        "end": {
          "line": 271,
          "column": 126
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
      "start": 6736,
      "end": 7340,
      "loc": {
        "start": {
          "line": 273,
          "column": 0
        },
        "end": {
          "line": 292,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 7341,
      "end": 7347,
      "loc": {
        "start": {
          "line": 293,
          "column": 0
        },
        "end": {
          "line": 293,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 7348,
      "end": 7353,
      "loc": {
        "start": {
          "line": 293,
          "column": 7
        },
        "end": {
          "line": 293,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "empty",
      "start": 7354,
      "end": 7359,
      "loc": {
        "start": {
          "line": 293,
          "column": 13
        },
        "end": {
          "line": 293,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 7360,
      "end": 7361,
      "loc": {
        "start": {
          "line": 293,
          "column": 19
        },
        "end": {
          "line": 293,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 7362,
      "end": 7397,
      "loc": {
        "start": {
          "line": 293,
          "column": 21
        },
        "end": {
          "line": 293,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7397,
      "end": 7398,
      "loc": {
        "start": {
          "line": 293,
          "column": 56
        },
        "end": {
          "line": 293,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 7398,
      "end": 7403,
      "loc": {
        "start": {
          "line": 293,
          "column": 57
        },
        "end": {
          "line": 293,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7403,
      "end": 7404,
      "loc": {
        "start": {
          "line": 293,
          "column": 62
        },
        "end": {
          "line": 293,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 7404,
      "end": 7412,
      "loc": {
        "start": {
          "line": 293,
          "column": 63
        },
        "end": {
          "line": 293,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7412,
      "end": 7413,
      "loc": {
        "start": {
          "line": 293,
          "column": 71
        },
        "end": {
          "line": 293,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "empty",
      "start": 7413,
      "end": 7418,
      "loc": {
        "start": {
          "line": 293,
          "column": 72
        },
        "end": {
          "line": 293,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7418,
      "end": 7419,
      "loc": {
        "start": {
          "line": 293,
          "column": 77
        },
        "end": {
          "line": 293,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `empty` without parameters",
      "start": 7420,
      "end": 7459,
      "loc": {
        "start": {
          "line": 293,
          "column": 79
        },
        "end": {
          "line": 293,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7459,
      "end": 7460,
      "loc": {
        "start": {
          "line": 293,
          "column": 118
        },
        "end": {
          "line": 293,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7460,
      "end": 7461,
      "loc": {
        "start": {
          "line": 293,
          "column": 119
        },
        "end": {
          "line": 293,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
      "start": 7463,
      "end": 8041,
      "loc": {
        "start": {
          "line": 295,
          "column": 0
        },
        "end": {
          "line": 313,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 8042,
      "end": 8048,
      "loc": {
        "start": {
          "line": 314,
          "column": 0
        },
        "end": {
          "line": 314,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 8049,
      "end": 8054,
      "loc": {
        "start": {
          "line": 314,
          "column": 7
        },
        "end": {
          "line": 314,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "equal",
      "start": 8055,
      "end": 8060,
      "loc": {
        "start": {
          "line": 314,
          "column": 13
        },
        "end": {
          "line": 314,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 8061,
      "end": 8062,
      "loc": {
        "start": {
          "line": 314,
          "column": 19
        },
        "end": {
          "line": 314,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 8063,
      "end": 8098,
      "loc": {
        "start": {
          "line": 314,
          "column": 21
        },
        "end": {
          "line": 314,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8098,
      "end": 8099,
      "loc": {
        "start": {
          "line": 314,
          "column": 56
        },
        "end": {
          "line": 314,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 8099,
      "end": 8104,
      "loc": {
        "start": {
          "line": 314,
          "column": 57
        },
        "end": {
          "line": 314,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8104,
      "end": 8105,
      "loc": {
        "start": {
          "line": 314,
          "column": 62
        },
        "end": {
          "line": 314,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 8105,
      "end": 8113,
      "loc": {
        "start": {
          "line": 314,
          "column": 63
        },
        "end": {
          "line": 314,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8113,
      "end": 8114,
      "loc": {
        "start": {
          "line": 314,
          "column": 71
        },
        "end": {
          "line": 314,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "equal",
      "start": 8114,
      "end": 8119,
      "loc": {
        "start": {
          "line": 314,
          "column": 72
        },
        "end": {
          "line": 314,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8119,
      "end": 8120,
      "loc": {
        "start": {
          "line": 314,
          "column": 77
        },
        "end": {
          "line": 314,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `equal` without parameters",
      "start": 8121,
      "end": 8160,
      "loc": {
        "start": {
          "line": 314,
          "column": 79
        },
        "end": {
          "line": 314,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8160,
      "end": 8161,
      "loc": {
        "start": {
          "line": 314,
          "column": 118
        },
        "end": {
          "line": 314,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8161,
      "end": 8162,
      "loc": {
        "start": {
          "line": 314,
          "column": 119
        },
        "end": {
          "line": 314,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
      "start": 8164,
      "end": 9025,
      "loc": {
        "start": {
          "line": 316,
          "column": 0
        },
        "end": {
          "line": 341,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 9026,
      "end": 9032,
      "loc": {
        "start": {
          "line": 342,
          "column": 0
        },
        "end": {
          "line": 342,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 9033,
      "end": 9038,
      "loc": {
        "start": {
          "line": 342,
          "column": 7
        },
        "end": {
          "line": 342,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filter",
      "start": 9039,
      "end": 9045,
      "loc": {
        "start": {
          "line": 342,
          "column": 13
        },
        "end": {
          "line": 342,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 9046,
      "end": 9047,
      "loc": {
        "start": {
          "line": 342,
          "column": 20
        },
        "end": {
          "line": 342,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 9048,
      "end": 9083,
      "loc": {
        "start": {
          "line": 342,
          "column": 22
        },
        "end": {
          "line": 342,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9083,
      "end": 9084,
      "loc": {
        "start": {
          "line": 342,
          "column": 57
        },
        "end": {
          "line": 342,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 9084,
      "end": 9089,
      "loc": {
        "start": {
          "line": 342,
          "column": 58
        },
        "end": {
          "line": 342,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9089,
      "end": 9090,
      "loc": {
        "start": {
          "line": 342,
          "column": 63
        },
        "end": {
          "line": 342,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 9090,
      "end": 9098,
      "loc": {
        "start": {
          "line": 342,
          "column": 64
        },
        "end": {
          "line": 342,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9098,
      "end": 9099,
      "loc": {
        "start": {
          "line": 342,
          "column": 72
        },
        "end": {
          "line": 342,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filter",
      "start": 9099,
      "end": 9105,
      "loc": {
        "start": {
          "line": 342,
          "column": 73
        },
        "end": {
          "line": 342,
          "column": 79
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9105,
      "end": 9106,
      "loc": {
        "start": {
          "line": 342,
          "column": 79
        },
        "end": {
          "line": 342,
          "column": 80
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `filter` without parameters",
      "start": 9107,
      "end": 9147,
      "loc": {
        "start": {
          "line": 342,
          "column": 81
        },
        "end": {
          "line": 342,
          "column": 121
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9147,
      "end": 9148,
      "loc": {
        "start": {
          "line": 342,
          "column": 121
        },
        "end": {
          "line": 342,
          "column": 122
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9148,
      "end": 9149,
      "loc": {
        "start": {
          "line": 342,
          "column": 122
        },
        "end": {
          "line": 342,
          "column": 123
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
      "start": 9151,
      "end": 9959,
      "loc": {
        "start": {
          "line": 344,
          "column": 0
        },
        "end": {
          "line": 368,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 9960,
      "end": 9966,
      "loc": {
        "start": {
          "line": 369,
          "column": 0
        },
        "end": {
          "line": 369,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 9967,
      "end": 9972,
      "loc": {
        "start": {
          "line": 369,
          "column": 7
        },
        "end": {
          "line": 369,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filterBy",
      "start": 9973,
      "end": 9981,
      "loc": {
        "start": {
          "line": 369,
          "column": 13
        },
        "end": {
          "line": 369,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 9982,
      "end": 9983,
      "loc": {
        "start": {
          "line": 369,
          "column": 22
        },
        "end": {
          "line": 369,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 9984,
      "end": 10019,
      "loc": {
        "start": {
          "line": 369,
          "column": 24
        },
        "end": {
          "line": 369,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 10019,
      "end": 10020,
      "loc": {
        "start": {
          "line": 369,
          "column": 59
        },
        "end": {
          "line": 369,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 10020,
      "end": 10025,
      "loc": {
        "start": {
          "line": 369,
          "column": 60
        },
        "end": {
          "line": 369,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10025,
      "end": 10026,
      "loc": {
        "start": {
          "line": 369,
          "column": 65
        },
        "end": {
          "line": 369,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 10026,
      "end": 10034,
      "loc": {
        "start": {
          "line": 369,
          "column": 66
        },
        "end": {
          "line": 369,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10034,
      "end": 10035,
      "loc": {
        "start": {
          "line": 369,
          "column": 74
        },
        "end": {
          "line": 369,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filterBy",
      "start": 10035,
      "end": 10043,
      "loc": {
        "start": {
          "line": 369,
          "column": 75
        },
        "end": {
          "line": 369,
          "column": 83
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10043,
      "end": 10044,
      "loc": {
        "start": {
          "line": 369,
          "column": 83
        },
        "end": {
          "line": 369,
          "column": 84
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `filterBy` without parameters",
      "start": 10045,
      "end": 10087,
      "loc": {
        "start": {
          "line": 369,
          "column": 85
        },
        "end": {
          "line": 369,
          "column": 127
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 10087,
      "end": 10088,
      "loc": {
        "start": {
          "line": 369,
          "column": 127
        },
        "end": {
          "line": 369,
          "column": 128
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10088,
      "end": 10089,
      "loc": {
        "start": {
          "line": 369,
          "column": 128
        },
        "end": {
          "line": 369,
          "column": 129
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 10091,
      "end": 10687,
      "loc": {
        "start": {
          "line": 371,
          "column": 0
        },
        "end": {
          "line": 391,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 10688,
      "end": 10694,
      "loc": {
        "start": {
          "line": 392,
          "column": 0
        },
        "end": {
          "line": 392,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 10695,
      "end": 10700,
      "loc": {
        "start": {
          "line": 392,
          "column": 7
        },
        "end": {
          "line": 392,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gt",
      "start": 10701,
      "end": 10703,
      "loc": {
        "start": {
          "line": 392,
          "column": 13
        },
        "end": {
          "line": 392,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 10704,
      "end": 10705,
      "loc": {
        "start": {
          "line": 392,
          "column": 16
        },
        "end": {
          "line": 392,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 10706,
      "end": 10741,
      "loc": {
        "start": {
          "line": 392,
          "column": 18
        },
        "end": {
          "line": 392,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 10741,
      "end": 10742,
      "loc": {
        "start": {
          "line": 392,
          "column": 53
        },
        "end": {
          "line": 392,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 10742,
      "end": 10747,
      "loc": {
        "start": {
          "line": 392,
          "column": 54
        },
        "end": {
          "line": 392,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10747,
      "end": 10748,
      "loc": {
        "start": {
          "line": 392,
          "column": 59
        },
        "end": {
          "line": 392,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 10748,
      "end": 10756,
      "loc": {
        "start": {
          "line": 392,
          "column": 60
        },
        "end": {
          "line": 392,
          "column": 68
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10756,
      "end": 10757,
      "loc": {
        "start": {
          "line": 392,
          "column": 68
        },
        "end": {
          "line": 392,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gt",
      "start": 10757,
      "end": 10759,
      "loc": {
        "start": {
          "line": 392,
          "column": 69
        },
        "end": {
          "line": 392,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10759,
      "end": 10760,
      "loc": {
        "start": {
          "line": 392,
          "column": 71
        },
        "end": {
          "line": 392,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `gt` without parameters",
      "start": 10761,
      "end": 10797,
      "loc": {
        "start": {
          "line": 392,
          "column": 73
        },
        "end": {
          "line": 392,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 10797,
      "end": 10798,
      "loc": {
        "start": {
          "line": 392,
          "column": 109
        },
        "end": {
          "line": 392,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10798,
      "end": 10799,
      "loc": {
        "start": {
          "line": 392,
          "column": 110
        },
        "end": {
          "line": 392,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 10801,
      "end": 11425,
      "loc": {
        "start": {
          "line": 394,
          "column": 0
        },
        "end": {
          "line": 414,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 11426,
      "end": 11432,
      "loc": {
        "start": {
          "line": 415,
          "column": 0
        },
        "end": {
          "line": 415,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 11433,
      "end": 11438,
      "loc": {
        "start": {
          "line": 415,
          "column": 7
        },
        "end": {
          "line": 415,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gte",
      "start": 11439,
      "end": 11442,
      "loc": {
        "start": {
          "line": 415,
          "column": 13
        },
        "end": {
          "line": 415,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 11443,
      "end": 11444,
      "loc": {
        "start": {
          "line": 415,
          "column": 17
        },
        "end": {
          "line": 415,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 11445,
      "end": 11480,
      "loc": {
        "start": {
          "line": 415,
          "column": 19
        },
        "end": {
          "line": 415,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 11480,
      "end": 11481,
      "loc": {
        "start": {
          "line": 415,
          "column": 54
        },
        "end": {
          "line": 415,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 11481,
      "end": 11486,
      "loc": {
        "start": {
          "line": 415,
          "column": 55
        },
        "end": {
          "line": 415,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11486,
      "end": 11487,
      "loc": {
        "start": {
          "line": 415,
          "column": 60
        },
        "end": {
          "line": 415,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 11487,
      "end": 11495,
      "loc": {
        "start": {
          "line": 415,
          "column": 61
        },
        "end": {
          "line": 415,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11495,
      "end": 11496,
      "loc": {
        "start": {
          "line": 415,
          "column": 69
        },
        "end": {
          "line": 415,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gte",
      "start": 11496,
      "end": 11499,
      "loc": {
        "start": {
          "line": 415,
          "column": 70
        },
        "end": {
          "line": 415,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11499,
      "end": 11500,
      "loc": {
        "start": {
          "line": 415,
          "column": 73
        },
        "end": {
          "line": 415,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `gte` without parameters",
      "start": 11501,
      "end": 11538,
      "loc": {
        "start": {
          "line": 415,
          "column": 75
        },
        "end": {
          "line": 415,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 11538,
      "end": 11539,
      "loc": {
        "start": {
          "line": 415,
          "column": 112
        },
        "end": {
          "line": 415,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11539,
      "end": 11540,
      "loc": {
        "start": {
          "line": 415,
          "column": 113
        },
        "end": {
          "line": 415,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
      "start": 11542,
      "end": 12214,
      "loc": {
        "start": {
          "line": 417,
          "column": 0
        },
        "end": {
          "line": 437,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 12215,
      "end": 12221,
      "loc": {
        "start": {
          "line": 438,
          "column": 0
        },
        "end": {
          "line": 438,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 12222,
      "end": 12227,
      "loc": {
        "start": {
          "line": 438,
          "column": 7
        },
        "end": {
          "line": 438,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "intersect",
      "start": 12228,
      "end": 12237,
      "loc": {
        "start": {
          "line": 438,
          "column": 13
        },
        "end": {
          "line": 438,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 12238,
      "end": 12239,
      "loc": {
        "start": {
          "line": 438,
          "column": 23
        },
        "end": {
          "line": 438,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 12240,
      "end": 12275,
      "loc": {
        "start": {
          "line": 438,
          "column": 25
        },
        "end": {
          "line": 438,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 12275,
      "end": 12276,
      "loc": {
        "start": {
          "line": 438,
          "column": 60
        },
        "end": {
          "line": 438,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 12276,
      "end": 12281,
      "loc": {
        "start": {
          "line": 438,
          "column": 61
        },
        "end": {
          "line": 438,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12281,
      "end": 12282,
      "loc": {
        "start": {
          "line": 438,
          "column": 66
        },
        "end": {
          "line": 438,
          "column": 67
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 12282,
      "end": 12290,
      "loc": {
        "start": {
          "line": 438,
          "column": 67
        },
        "end": {
          "line": 438,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12290,
      "end": 12291,
      "loc": {
        "start": {
          "line": 438,
          "column": 75
        },
        "end": {
          "line": 438,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "intersect",
      "start": 12291,
      "end": 12300,
      "loc": {
        "start": {
          "line": 438,
          "column": 76
        },
        "end": {
          "line": 438,
          "column": 85
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12300,
      "end": 12301,
      "loc": {
        "start": {
          "line": 438,
          "column": 85
        },
        "end": {
          "line": 438,
          "column": 86
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `intersect` without parameters",
      "start": 12302,
      "end": 12345,
      "loc": {
        "start": {
          "line": 438,
          "column": 87
        },
        "end": {
          "line": 438,
          "column": 130
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 12345,
      "end": 12346,
      "loc": {
        "start": {
          "line": 438,
          "column": 130
        },
        "end": {
          "line": 438,
          "column": 131
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12346,
      "end": 12347,
      "loc": {
        "start": {
          "line": 438,
          "column": 131
        },
        "end": {
          "line": 438,
          "column": 132
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 12349,
      "end": 12941,
      "loc": {
        "start": {
          "line": 440,
          "column": 0
        },
        "end": {
          "line": 460,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 12942,
      "end": 12948,
      "loc": {
        "start": {
          "line": 461,
          "column": 0
        },
        "end": {
          "line": 461,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 12949,
      "end": 12954,
      "loc": {
        "start": {
          "line": 461,
          "column": 7
        },
        "end": {
          "line": 461,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lt",
      "start": 12955,
      "end": 12957,
      "loc": {
        "start": {
          "line": 461,
          "column": 13
        },
        "end": {
          "line": 461,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 12958,
      "end": 12959,
      "loc": {
        "start": {
          "line": 461,
          "column": 16
        },
        "end": {
          "line": 461,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 12960,
      "end": 12995,
      "loc": {
        "start": {
          "line": 461,
          "column": 18
        },
        "end": {
          "line": 461,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 12995,
      "end": 12996,
      "loc": {
        "start": {
          "line": 461,
          "column": 53
        },
        "end": {
          "line": 461,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 12996,
      "end": 13001,
      "loc": {
        "start": {
          "line": 461,
          "column": 54
        },
        "end": {
          "line": 461,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13001,
      "end": 13002,
      "loc": {
        "start": {
          "line": 461,
          "column": 59
        },
        "end": {
          "line": 461,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 13002,
      "end": 13010,
      "loc": {
        "start": {
          "line": 461,
          "column": 60
        },
        "end": {
          "line": 461,
          "column": 68
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13010,
      "end": 13011,
      "loc": {
        "start": {
          "line": 461,
          "column": 68
        },
        "end": {
          "line": 461,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lt",
      "start": 13011,
      "end": 13013,
      "loc": {
        "start": {
          "line": 461,
          "column": 69
        },
        "end": {
          "line": 461,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13013,
      "end": 13014,
      "loc": {
        "start": {
          "line": 461,
          "column": 71
        },
        "end": {
          "line": 461,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `lt` without parameters",
      "start": 13015,
      "end": 13051,
      "loc": {
        "start": {
          "line": 461,
          "column": 73
        },
        "end": {
          "line": 461,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13051,
      "end": 13052,
      "loc": {
        "start": {
          "line": 461,
          "column": 109
        },
        "end": {
          "line": 461,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13052,
      "end": 13053,
      "loc": {
        "start": {
          "line": 461,
          "column": 110
        },
        "end": {
          "line": 461,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 13055,
      "end": 13676,
      "loc": {
        "start": {
          "line": 463,
          "column": 0
        },
        "end": {
          "line": 483,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 13677,
      "end": 13683,
      "loc": {
        "start": {
          "line": 484,
          "column": 0
        },
        "end": {
          "line": 484,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 13684,
      "end": 13689,
      "loc": {
        "start": {
          "line": 484,
          "column": 7
        },
        "end": {
          "line": 484,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lte",
      "start": 13690,
      "end": 13693,
      "loc": {
        "start": {
          "line": 484,
          "column": 13
        },
        "end": {
          "line": 484,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 13694,
      "end": 13695,
      "loc": {
        "start": {
          "line": 484,
          "column": 17
        },
        "end": {
          "line": 484,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 13696,
      "end": 13731,
      "loc": {
        "start": {
          "line": 484,
          "column": 19
        },
        "end": {
          "line": 484,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13731,
      "end": 13732,
      "loc": {
        "start": {
          "line": 484,
          "column": 54
        },
        "end": {
          "line": 484,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 13732,
      "end": 13737,
      "loc": {
        "start": {
          "line": 484,
          "column": 55
        },
        "end": {
          "line": 484,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13737,
      "end": 13738,
      "loc": {
        "start": {
          "line": 484,
          "column": 60
        },
        "end": {
          "line": 484,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 13738,
      "end": 13746,
      "loc": {
        "start": {
          "line": 484,
          "column": 61
        },
        "end": {
          "line": 484,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13746,
      "end": 13747,
      "loc": {
        "start": {
          "line": 484,
          "column": 69
        },
        "end": {
          "line": 484,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lte",
      "start": 13747,
      "end": 13750,
      "loc": {
        "start": {
          "line": 484,
          "column": 70
        },
        "end": {
          "line": 484,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13750,
      "end": 13751,
      "loc": {
        "start": {
          "line": 484,
          "column": 73
        },
        "end": {
          "line": 484,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `lte` without parameters",
      "start": 13752,
      "end": 13789,
      "loc": {
        "start": {
          "line": 484,
          "column": 75
        },
        "end": {
          "line": 484,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13789,
      "end": 13790,
      "loc": {
        "start": {
          "line": 484,
          "column": 112
        },
        "end": {
          "line": 484,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13790,
      "end": 13791,
      "loc": {
        "start": {
          "line": 484,
          "column": 113
        },
        "end": {
          "line": 484,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
      "start": 13793,
      "end": 14497,
      "loc": {
        "start": {
          "line": 486,
          "column": 0
        },
        "end": {
          "line": 507,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 14498,
      "end": 14504,
      "loc": {
        "start": {
          "line": 508,
          "column": 0
        },
        "end": {
          "line": 508,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 14505,
      "end": 14510,
      "loc": {
        "start": {
          "line": 508,
          "column": 7
        },
        "end": {
          "line": 508,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "map",
      "start": 14511,
      "end": 14514,
      "loc": {
        "start": {
          "line": 508,
          "column": 13
        },
        "end": {
          "line": 508,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 14515,
      "end": 14516,
      "loc": {
        "start": {
          "line": 508,
          "column": 17
        },
        "end": {
          "line": 508,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 14517,
      "end": 14552,
      "loc": {
        "start": {
          "line": 508,
          "column": 19
        },
        "end": {
          "line": 508,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 14552,
      "end": 14553,
      "loc": {
        "start": {
          "line": 508,
          "column": 54
        },
        "end": {
          "line": 508,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 14553,
      "end": 14558,
      "loc": {
        "start": {
          "line": 508,
          "column": 55
        },
        "end": {
          "line": 508,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14558,
      "end": 14559,
      "loc": {
        "start": {
          "line": 508,
          "column": 60
        },
        "end": {
          "line": 508,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 14559,
      "end": 14567,
      "loc": {
        "start": {
          "line": 508,
          "column": 61
        },
        "end": {
          "line": 508,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14567,
      "end": 14568,
      "loc": {
        "start": {
          "line": 508,
          "column": 69
        },
        "end": {
          "line": 508,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "map",
      "start": 14568,
      "end": 14571,
      "loc": {
        "start": {
          "line": 508,
          "column": 70
        },
        "end": {
          "line": 508,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14571,
      "end": 14572,
      "loc": {
        "start": {
          "line": 508,
          "column": 73
        },
        "end": {
          "line": 508,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `map` without parameters",
      "start": 14573,
      "end": 14610,
      "loc": {
        "start": {
          "line": 508,
          "column": 75
        },
        "end": {
          "line": 508,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 14610,
      "end": 14611,
      "loc": {
        "start": {
          "line": 508,
          "column": 112
        },
        "end": {
          "line": 508,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14611,
      "end": 14612,
      "loc": {
        "start": {
          "line": 508,
          "column": 113
        },
        "end": {
          "line": 508,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
      "start": 14614,
      "end": 15282,
      "loc": {
        "start": {
          "line": 510,
          "column": 0
        },
        "end": {
          "line": 533,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 15283,
      "end": 15289,
      "loc": {
        "start": {
          "line": 534,
          "column": 0
        },
        "end": {
          "line": 534,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 15290,
      "end": 15295,
      "loc": {
        "start": {
          "line": 534,
          "column": 7
        },
        "end": {
          "line": 534,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "mapBy",
      "start": 15296,
      "end": 15301,
      "loc": {
        "start": {
          "line": 534,
          "column": 13
        },
        "end": {
          "line": 534,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 15302,
      "end": 15303,
      "loc": {
        "start": {
          "line": 534,
          "column": 19
        },
        "end": {
          "line": 534,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 15304,
      "end": 15339,
      "loc": {
        "start": {
          "line": 534,
          "column": 21
        },
        "end": {
          "line": 534,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 15339,
      "end": 15340,
      "loc": {
        "start": {
          "line": 534,
          "column": 56
        },
        "end": {
          "line": 534,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 15340,
      "end": 15345,
      "loc": {
        "start": {
          "line": 534,
          "column": 57
        },
        "end": {
          "line": 534,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15345,
      "end": 15346,
      "loc": {
        "start": {
          "line": 534,
          "column": 62
        },
        "end": {
          "line": 534,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 15346,
      "end": 15354,
      "loc": {
        "start": {
          "line": 534,
          "column": 63
        },
        "end": {
          "line": 534,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15354,
      "end": 15355,
      "loc": {
        "start": {
          "line": 534,
          "column": 71
        },
        "end": {
          "line": 534,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "mapBy",
      "start": 15355,
      "end": 15360,
      "loc": {
        "start": {
          "line": 534,
          "column": 72
        },
        "end": {
          "line": 534,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15360,
      "end": 15361,
      "loc": {
        "start": {
          "line": 534,
          "column": 77
        },
        "end": {
          "line": 534,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `mapBy` without parameters",
      "start": 15362,
      "end": 15401,
      "loc": {
        "start": {
          "line": 534,
          "column": 79
        },
        "end": {
          "line": 534,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 15401,
      "end": 15402,
      "loc": {
        "start": {
          "line": 534,
          "column": 118
        },
        "end": {
          "line": 534,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15402,
      "end": 15403,
      "loc": {
        "start": {
          "line": 534,
          "column": 119
        },
        "end": {
          "line": 534,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
      "start": 15405,
      "end": 16098,
      "loc": {
        "start": {
          "line": 536,
          "column": 0
        },
        "end": {
          "line": 557,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 16099,
      "end": 16105,
      "loc": {
        "start": {
          "line": 558,
          "column": 0
        },
        "end": {
          "line": 558,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 16106,
      "end": 16111,
      "loc": {
        "start": {
          "line": 558,
          "column": 7
        },
        "end": {
          "line": 558,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "match",
      "start": 16112,
      "end": 16117,
      "loc": {
        "start": {
          "line": 558,
          "column": 13
        },
        "end": {
          "line": 558,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 16118,
      "end": 16119,
      "loc": {
        "start": {
          "line": 558,
          "column": 19
        },
        "end": {
          "line": 558,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 16120,
      "end": 16155,
      "loc": {
        "start": {
          "line": 558,
          "column": 21
        },
        "end": {
          "line": 558,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16155,
      "end": 16156,
      "loc": {
        "start": {
          "line": 558,
          "column": 56
        },
        "end": {
          "line": 558,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 16156,
      "end": 16161,
      "loc": {
        "start": {
          "line": 558,
          "column": 57
        },
        "end": {
          "line": 558,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16161,
      "end": 16162,
      "loc": {
        "start": {
          "line": 558,
          "column": 62
        },
        "end": {
          "line": 558,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 16162,
      "end": 16170,
      "loc": {
        "start": {
          "line": 558,
          "column": 63
        },
        "end": {
          "line": 558,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16170,
      "end": 16171,
      "loc": {
        "start": {
          "line": 558,
          "column": 71
        },
        "end": {
          "line": 558,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "match",
      "start": 16171,
      "end": 16176,
      "loc": {
        "start": {
          "line": 558,
          "column": 72
        },
        "end": {
          "line": 558,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16176,
      "end": 16177,
      "loc": {
        "start": {
          "line": 558,
          "column": 77
        },
        "end": {
          "line": 558,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `match` without parameters",
      "start": 16178,
      "end": 16217,
      "loc": {
        "start": {
          "line": 558,
          "column": 79
        },
        "end": {
          "line": 558,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16217,
      "end": 16218,
      "loc": {
        "start": {
          "line": 558,
          "column": 118
        },
        "end": {
          "line": 558,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16218,
      "end": 16219,
      "loc": {
        "start": {
          "line": 558,
          "column": 119
        },
        "end": {
          "line": 558,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 16221,
      "end": 16817,
      "loc": {
        "start": {
          "line": 560,
          "column": 0
        },
        "end": {
          "line": 579,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 16818,
      "end": 16824,
      "loc": {
        "start": {
          "line": 580,
          "column": 0
        },
        "end": {
          "line": 580,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 16825,
      "end": 16830,
      "loc": {
        "start": {
          "line": 580,
          "column": 7
        },
        "end": {
          "line": 580,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "max",
      "start": 16831,
      "end": 16834,
      "loc": {
        "start": {
          "line": 580,
          "column": 13
        },
        "end": {
          "line": 580,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 16835,
      "end": 16836,
      "loc": {
        "start": {
          "line": 580,
          "column": 17
        },
        "end": {
          "line": 580,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 16837,
      "end": 16872,
      "loc": {
        "start": {
          "line": 580,
          "column": 19
        },
        "end": {
          "line": 580,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16872,
      "end": 16873,
      "loc": {
        "start": {
          "line": 580,
          "column": 54
        },
        "end": {
          "line": 580,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 16873,
      "end": 16878,
      "loc": {
        "start": {
          "line": 580,
          "column": 55
        },
        "end": {
          "line": 580,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16878,
      "end": 16879,
      "loc": {
        "start": {
          "line": 580,
          "column": 60
        },
        "end": {
          "line": 580,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 16879,
      "end": 16887,
      "loc": {
        "start": {
          "line": 580,
          "column": 61
        },
        "end": {
          "line": 580,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16887,
      "end": 16888,
      "loc": {
        "start": {
          "line": 580,
          "column": 69
        },
        "end": {
          "line": 580,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "max",
      "start": 16888,
      "end": 16891,
      "loc": {
        "start": {
          "line": 580,
          "column": 70
        },
        "end": {
          "line": 580,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16891,
      "end": 16892,
      "loc": {
        "start": {
          "line": 580,
          "column": 73
        },
        "end": {
          "line": 580,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `max` without parameters",
      "start": 16893,
      "end": 16930,
      "loc": {
        "start": {
          "line": 580,
          "column": 75
        },
        "end": {
          "line": 580,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16930,
      "end": 16931,
      "loc": {
        "start": {
          "line": 580,
          "column": 112
        },
        "end": {
          "line": 580,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16931,
      "end": 16932,
      "loc": {
        "start": {
          "line": 580,
          "column": 113
        },
        "end": {
          "line": 580,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 16934,
      "end": 17528,
      "loc": {
        "start": {
          "line": 582,
          "column": 0
        },
        "end": {
          "line": 601,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 17529,
      "end": 17535,
      "loc": {
        "start": {
          "line": 602,
          "column": 0
        },
        "end": {
          "line": 602,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 17536,
      "end": 17541,
      "loc": {
        "start": {
          "line": 602,
          "column": 7
        },
        "end": {
          "line": 602,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "min",
      "start": 17542,
      "end": 17545,
      "loc": {
        "start": {
          "line": 602,
          "column": 13
        },
        "end": {
          "line": 602,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 17546,
      "end": 17547,
      "loc": {
        "start": {
          "line": 602,
          "column": 17
        },
        "end": {
          "line": 602,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 17548,
      "end": 17583,
      "loc": {
        "start": {
          "line": 602,
          "column": 19
        },
        "end": {
          "line": 602,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 17583,
      "end": 17584,
      "loc": {
        "start": {
          "line": 602,
          "column": 54
        },
        "end": {
          "line": 602,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 17584,
      "end": 17589,
      "loc": {
        "start": {
          "line": 602,
          "column": 55
        },
        "end": {
          "line": 602,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17589,
      "end": 17590,
      "loc": {
        "start": {
          "line": 602,
          "column": 60
        },
        "end": {
          "line": 602,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 17590,
      "end": 17598,
      "loc": {
        "start": {
          "line": 602,
          "column": 61
        },
        "end": {
          "line": 602,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17598,
      "end": 17599,
      "loc": {
        "start": {
          "line": 602,
          "column": 69
        },
        "end": {
          "line": 602,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "min",
      "start": 17599,
      "end": 17602,
      "loc": {
        "start": {
          "line": 602,
          "column": 70
        },
        "end": {
          "line": 602,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17602,
      "end": 17603,
      "loc": {
        "start": {
          "line": 602,
          "column": 73
        },
        "end": {
          "line": 602,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `min` without parameters",
      "start": 17604,
      "end": 17641,
      "loc": {
        "start": {
          "line": 602,
          "column": 75
        },
        "end": {
          "line": 602,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 17641,
      "end": 17642,
      "loc": {
        "start": {
          "line": 602,
          "column": 112
        },
        "end": {
          "line": 602,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17642,
      "end": 17643,
      "loc": {
        "start": {
          "line": 602,
          "column": 113
        },
        "end": {
          "line": 602,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 17645,
      "end": 18309,
      "loc": {
        "start": {
          "line": 604,
          "column": 0
        },
        "end": {
          "line": 624,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 18310,
      "end": 18316,
      "loc": {
        "start": {
          "line": 625,
          "column": 0
        },
        "end": {
          "line": 625,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 18317,
      "end": 18322,
      "loc": {
        "start": {
          "line": 625,
          "column": 7
        },
        "end": {
          "line": 625,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "none",
      "start": 18323,
      "end": 18327,
      "loc": {
        "start": {
          "line": 625,
          "column": 13
        },
        "end": {
          "line": 625,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 18328,
      "end": 18329,
      "loc": {
        "start": {
          "line": 625,
          "column": 18
        },
        "end": {
          "line": 625,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 18330,
      "end": 18365,
      "loc": {
        "start": {
          "line": 625,
          "column": 20
        },
        "end": {
          "line": 625,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 18365,
      "end": 18366,
      "loc": {
        "start": {
          "line": 625,
          "column": 55
        },
        "end": {
          "line": 625,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 18366,
      "end": 18371,
      "loc": {
        "start": {
          "line": 625,
          "column": 56
        },
        "end": {
          "line": 625,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18371,
      "end": 18372,
      "loc": {
        "start": {
          "line": 625,
          "column": 61
        },
        "end": {
          "line": 625,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 18372,
      "end": 18380,
      "loc": {
        "start": {
          "line": 625,
          "column": 62
        },
        "end": {
          "line": 625,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18380,
      "end": 18381,
      "loc": {
        "start": {
          "line": 625,
          "column": 70
        },
        "end": {
          "line": 625,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "none",
      "start": 18381,
      "end": 18385,
      "loc": {
        "start": {
          "line": 625,
          "column": 71
        },
        "end": {
          "line": 625,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18385,
      "end": 18386,
      "loc": {
        "start": {
          "line": 625,
          "column": 75
        },
        "end": {
          "line": 625,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `none` without parameters",
      "start": 18387,
      "end": 18425,
      "loc": {
        "start": {
          "line": 625,
          "column": 77
        },
        "end": {
          "line": 625,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 18425,
      "end": 18426,
      "loc": {
        "start": {
          "line": 625,
          "column": 115
        },
        "end": {
          "line": 625,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18426,
      "end": 18427,
      "loc": {
        "start": {
          "line": 625,
          "column": 116
        },
        "end": {
          "line": 625,
          "column": 117
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
      "start": 18429,
      "end": 18971,
      "loc": {
        "start": {
          "line": 627,
          "column": 0
        },
        "end": {
          "line": 646,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 18972,
      "end": 18978,
      "loc": {
        "start": {
          "line": 647,
          "column": 0
        },
        "end": {
          "line": 647,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 18979,
      "end": 18984,
      "loc": {
        "start": {
          "line": 647,
          "column": 7
        },
        "end": {
          "line": 647,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "not",
      "start": 18985,
      "end": 18988,
      "loc": {
        "start": {
          "line": 647,
          "column": 13
        },
        "end": {
          "line": 647,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 18989,
      "end": 18990,
      "loc": {
        "start": {
          "line": 647,
          "column": 17
        },
        "end": {
          "line": 647,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 18991,
      "end": 19026,
      "loc": {
        "start": {
          "line": 647,
          "column": 19
        },
        "end": {
          "line": 647,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 19026,
      "end": 19027,
      "loc": {
        "start": {
          "line": 647,
          "column": 54
        },
        "end": {
          "line": 647,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 19027,
      "end": 19032,
      "loc": {
        "start": {
          "line": 647,
          "column": 55
        },
        "end": {
          "line": 647,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19032,
      "end": 19033,
      "loc": {
        "start": {
          "line": 647,
          "column": 60
        },
        "end": {
          "line": 647,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 19033,
      "end": 19041,
      "loc": {
        "start": {
          "line": 647,
          "column": 61
        },
        "end": {
          "line": 647,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19041,
      "end": 19042,
      "loc": {
        "start": {
          "line": 647,
          "column": 69
        },
        "end": {
          "line": 647,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "not",
      "start": 19042,
      "end": 19045,
      "loc": {
        "start": {
          "line": 647,
          "column": 70
        },
        "end": {
          "line": 647,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19045,
      "end": 19046,
      "loc": {
        "start": {
          "line": 647,
          "column": 73
        },
        "end": {
          "line": 647,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `not` without parameters",
      "start": 19047,
      "end": 19084,
      "loc": {
        "start": {
          "line": 647,
          "column": 75
        },
        "end": {
          "line": 647,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 19084,
      "end": 19085,
      "loc": {
        "start": {
          "line": 647,
          "column": 112
        },
        "end": {
          "line": 647,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19085,
      "end": 19086,
      "loc": {
        "start": {
          "line": 647,
          "column": 113
        },
        "end": {
          "line": 647,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 19088,
      "end": 19726,
      "loc": {
        "start": {
          "line": 649,
          "column": 0
        },
        "end": {
          "line": 668,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 19727,
      "end": 19733,
      "loc": {
        "start": {
          "line": 669,
          "column": 0
        },
        "end": {
          "line": 669,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 19734,
      "end": 19739,
      "loc": {
        "start": {
          "line": 669,
          "column": 7
        },
        "end": {
          "line": 669,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "notEmpty",
      "start": 19740,
      "end": 19748,
      "loc": {
        "start": {
          "line": 669,
          "column": 13
        },
        "end": {
          "line": 669,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 19749,
      "end": 19750,
      "loc": {
        "start": {
          "line": 669,
          "column": 22
        },
        "end": {
          "line": 669,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 19751,
      "end": 19786,
      "loc": {
        "start": {
          "line": 669,
          "column": 24
        },
        "end": {
          "line": 669,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 19786,
      "end": 19787,
      "loc": {
        "start": {
          "line": 669,
          "column": 59
        },
        "end": {
          "line": 669,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 19787,
      "end": 19792,
      "loc": {
        "start": {
          "line": 669,
          "column": 60
        },
        "end": {
          "line": 669,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19792,
      "end": 19793,
      "loc": {
        "start": {
          "line": 669,
          "column": 65
        },
        "end": {
          "line": 669,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 19793,
      "end": 19801,
      "loc": {
        "start": {
          "line": 669,
          "column": 66
        },
        "end": {
          "line": 669,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19801,
      "end": 19802,
      "loc": {
        "start": {
          "line": 669,
          "column": 74
        },
        "end": {
          "line": 669,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "notEmpty",
      "start": 19802,
      "end": 19810,
      "loc": {
        "start": {
          "line": 669,
          "column": 75
        },
        "end": {
          "line": 669,
          "column": 83
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19810,
      "end": 19811,
      "loc": {
        "start": {
          "line": 669,
          "column": 83
        },
        "end": {
          "line": 669,
          "column": 84
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `notEmpty` without parameters",
      "start": 19812,
      "end": 19854,
      "loc": {
        "start": {
          "line": 669,
          "column": 85
        },
        "end": {
          "line": 669,
          "column": 127
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 19854,
      "end": 19855,
      "loc": {
        "start": {
          "line": 669,
          "column": 127
        },
        "end": {
          "line": 669,
          "column": 128
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19855,
      "end": 19856,
      "loc": {
        "start": {
          "line": 669,
          "column": 128
        },
        "end": {
          "line": 669,
          "column": 129
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
      "start": 19858,
      "end": 20665,
      "loc": {
        "start": {
          "line": 671,
          "column": 0
        },
        "end": {
          "line": 693,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 20666,
      "end": 20672,
      "loc": {
        "start": {
          "line": 694,
          "column": 0
        },
        "end": {
          "line": 694,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 20673,
      "end": 20678,
      "loc": {
        "start": {
          "line": 694,
          "column": 7
        },
        "end": {
          "line": 694,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "oneWay",
      "start": 20679,
      "end": 20685,
      "loc": {
        "start": {
          "line": 694,
          "column": 13
        },
        "end": {
          "line": 694,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 20686,
      "end": 20687,
      "loc": {
        "start": {
          "line": 694,
          "column": 20
        },
        "end": {
          "line": 694,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 20688,
      "end": 20723,
      "loc": {
        "start": {
          "line": 694,
          "column": 22
        },
        "end": {
          "line": 694,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 20723,
      "end": 20724,
      "loc": {
        "start": {
          "line": 694,
          "column": 57
        },
        "end": {
          "line": 694,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 20724,
      "end": 20729,
      "loc": {
        "start": {
          "line": 694,
          "column": 58
        },
        "end": {
          "line": 694,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20729,
      "end": 20730,
      "loc": {
        "start": {
          "line": 694,
          "column": 63
        },
        "end": {
          "line": 694,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 20730,
      "end": 20738,
      "loc": {
        "start": {
          "line": 694,
          "column": 64
        },
        "end": {
          "line": 694,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20738,
      "end": 20739,
      "loc": {
        "start": {
          "line": 694,
          "column": 72
        },
        "end": {
          "line": 694,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "oneWay",
      "start": 20739,
      "end": 20745,
      "loc": {
        "start": {
          "line": 694,
          "column": 73
        },
        "end": {
          "line": 694,
          "column": 79
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20745,
      "end": 20746,
      "loc": {
        "start": {
          "line": 694,
          "column": 79
        },
        "end": {
          "line": 694,
          "column": 80
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `oneWay` without parameters",
      "start": 20747,
      "end": 20787,
      "loc": {
        "start": {
          "line": 694,
          "column": 81
        },
        "end": {
          "line": 694,
          "column": 121
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 20787,
      "end": 20788,
      "loc": {
        "start": {
          "line": 694,
          "column": 121
        },
        "end": {
          "line": 694,
          "column": 122
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20788,
      "end": 20789,
      "loc": {
        "start": {
          "line": 694,
          "column": 122
        },
        "end": {
          "line": 694,
          "column": 123
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
      "start": 20791,
      "end": 21378,
      "loc": {
        "start": {
          "line": 696,
          "column": 0
        },
        "end": {
          "line": 716,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 21379,
      "end": 21385,
      "loc": {
        "start": {
          "line": 717,
          "column": 0
        },
        "end": {
          "line": 717,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 21386,
      "end": 21391,
      "loc": {
        "start": {
          "line": 717,
          "column": 7
        },
        "end": {
          "line": 717,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "or",
      "start": 21392,
      "end": 21394,
      "loc": {
        "start": {
          "line": 717,
          "column": 13
        },
        "end": {
          "line": 717,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 21395,
      "end": 21396,
      "loc": {
        "start": {
          "line": 717,
          "column": 16
        },
        "end": {
          "line": 717,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 21397,
      "end": 21432,
      "loc": {
        "start": {
          "line": 717,
          "column": 18
        },
        "end": {
          "line": 717,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 21432,
      "end": 21433,
      "loc": {
        "start": {
          "line": 717,
          "column": 53
        },
        "end": {
          "line": 717,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 21433,
      "end": 21438,
      "loc": {
        "start": {
          "line": 717,
          "column": 54
        },
        "end": {
          "line": 717,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21438,
      "end": 21439,
      "loc": {
        "start": {
          "line": 717,
          "column": 59
        },
        "end": {
          "line": 717,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 21439,
      "end": 21447,
      "loc": {
        "start": {
          "line": 717,
          "column": 60
        },
        "end": {
          "line": 717,
          "column": 68
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21447,
      "end": 21448,
      "loc": {
        "start": {
          "line": 717,
          "column": 68
        },
        "end": {
          "line": 717,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "or",
      "start": 21448,
      "end": 21450,
      "loc": {
        "start": {
          "line": 717,
          "column": 69
        },
        "end": {
          "line": 717,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21450,
      "end": 21451,
      "loc": {
        "start": {
          "line": 717,
          "column": 71
        },
        "end": {
          "line": 717,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `or` without parameters",
      "start": 21452,
      "end": 21488,
      "loc": {
        "start": {
          "line": 717,
          "column": 73
        },
        "end": {
          "line": 717,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 21488,
      "end": 21489,
      "loc": {
        "start": {
          "line": 717,
          "column": 109
        },
        "end": {
          "line": 717,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21489,
      "end": 21490,
      "loc": {
        "start": {
          "line": 717,
          "column": 110
        },
        "end": {
          "line": 717,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
      "start": 21492,
      "end": 22032,
      "loc": {
        "start": {
          "line": 719,
          "column": 0
        },
        "end": {
          "line": 736,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 22033,
      "end": 22039,
      "loc": {
        "start": {
          "line": 737,
          "column": 0
        },
        "end": {
          "line": 737,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 22040,
      "end": 22045,
      "loc": {
        "start": {
          "line": 737,
          "column": 7
        },
        "end": {
          "line": 737,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "reads",
      "start": 22046,
      "end": 22051,
      "loc": {
        "start": {
          "line": 737,
          "column": 13
        },
        "end": {
          "line": 737,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 22052,
      "end": 22053,
      "loc": {
        "start": {
          "line": 737,
          "column": 19
        },
        "end": {
          "line": 737,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 22054,
      "end": 22089,
      "loc": {
        "start": {
          "line": 737,
          "column": 21
        },
        "end": {
          "line": 737,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 22089,
      "end": 22090,
      "loc": {
        "start": {
          "line": 737,
          "column": 56
        },
        "end": {
          "line": 737,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 22090,
      "end": 22095,
      "loc": {
        "start": {
          "line": 737,
          "column": 57
        },
        "end": {
          "line": 737,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22095,
      "end": 22096,
      "loc": {
        "start": {
          "line": 737,
          "column": 62
        },
        "end": {
          "line": 737,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 22096,
      "end": 22104,
      "loc": {
        "start": {
          "line": 737,
          "column": 63
        },
        "end": {
          "line": 737,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22104,
      "end": 22105,
      "loc": {
        "start": {
          "line": 737,
          "column": 71
        },
        "end": {
          "line": 737,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "reads",
      "start": 22105,
      "end": 22110,
      "loc": {
        "start": {
          "line": 737,
          "column": 72
        },
        "end": {
          "line": 737,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22110,
      "end": 22111,
      "loc": {
        "start": {
          "line": 737,
          "column": 77
        },
        "end": {
          "line": 737,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `reads` without parameters",
      "start": 22112,
      "end": 22151,
      "loc": {
        "start": {
          "line": 737,
          "column": 79
        },
        "end": {
          "line": 737,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 22151,
      "end": 22152,
      "loc": {
        "start": {
          "line": 737,
          "column": 118
        },
        "end": {
          "line": 737,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22152,
      "end": 22153,
      "loc": {
        "start": {
          "line": 737,
          "column": 119
        },
        "end": {
          "line": 737,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
      "start": 22155,
      "end": 22901,
      "loc": {
        "start": {
          "line": 739,
          "column": 0
        },
        "end": {
          "line": 760,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 22902,
      "end": 22908,
      "loc": {
        "start": {
          "line": 761,
          "column": 0
        },
        "end": {
          "line": 761,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 22909,
      "end": 22914,
      "loc": {
        "start": {
          "line": 761,
          "column": 7
        },
        "end": {
          "line": 761,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "setDiff",
      "start": 22915,
      "end": 22922,
      "loc": {
        "start": {
          "line": 761,
          "column": 13
        },
        "end": {
          "line": 761,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 22923,
      "end": 22924,
      "loc": {
        "start": {
          "line": 761,
          "column": 21
        },
        "end": {
          "line": 761,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 22925,
      "end": 22960,
      "loc": {
        "start": {
          "line": 761,
          "column": 23
        },
        "end": {
          "line": 761,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 22960,
      "end": 22961,
      "loc": {
        "start": {
          "line": 761,
          "column": 58
        },
        "end": {
          "line": 761,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 22961,
      "end": 22966,
      "loc": {
        "start": {
          "line": 761,
          "column": 59
        },
        "end": {
          "line": 761,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22966,
      "end": 22967,
      "loc": {
        "start": {
          "line": 761,
          "column": 64
        },
        "end": {
          "line": 761,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 22967,
      "end": 22975,
      "loc": {
        "start": {
          "line": 761,
          "column": 65
        },
        "end": {
          "line": 761,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22975,
      "end": 22976,
      "loc": {
        "start": {
          "line": 761,
          "column": 73
        },
        "end": {
          "line": 761,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "setDiff",
      "start": 22976,
      "end": 22983,
      "loc": {
        "start": {
          "line": 761,
          "column": 74
        },
        "end": {
          "line": 761,
          "column": 81
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22983,
      "end": 22984,
      "loc": {
        "start": {
          "line": 761,
          "column": 81
        },
        "end": {
          "line": 761,
          "column": 82
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `setDiff` without parameters",
      "start": 22985,
      "end": 23026,
      "loc": {
        "start": {
          "line": 761,
          "column": 83
        },
        "end": {
          "line": 761,
          "column": 124
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 23026,
      "end": 23027,
      "loc": {
        "start": {
          "line": 761,
          "column": 124
        },
        "end": {
          "line": 761,
          "column": 125
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 23027,
      "end": 23028,
      "loc": {
        "start": {
          "line": 761,
          "column": 125
        },
        "end": {
          "line": 761,
          "column": 126
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
      "start": 23030,
      "end": 24667,
      "loc": {
        "start": {
          "line": 763,
          "column": 0
        },
        "end": {
          "line": 808,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 24668,
      "end": 24674,
      "loc": {
        "start": {
          "line": 809,
          "column": 0
        },
        "end": {
          "line": 809,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 24675,
      "end": 24680,
      "loc": {
        "start": {
          "line": 809,
          "column": 7
        },
        "end": {
          "line": 809,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sort",
      "start": 24681,
      "end": 24685,
      "loc": {
        "start": {
          "line": 809,
          "column": 13
        },
        "end": {
          "line": 809,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 24686,
      "end": 24687,
      "loc": {
        "start": {
          "line": 809,
          "column": 18
        },
        "end": {
          "line": 809,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 24688,
      "end": 24723,
      "loc": {
        "start": {
          "line": 809,
          "column": 20
        },
        "end": {
          "line": 809,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 24723,
      "end": 24724,
      "loc": {
        "start": {
          "line": 809,
          "column": 55
        },
        "end": {
          "line": 809,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 24724,
      "end": 24729,
      "loc": {
        "start": {
          "line": 809,
          "column": 56
        },
        "end": {
          "line": 809,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 24729,
      "end": 24730,
      "loc": {
        "start": {
          "line": 809,
          "column": 61
        },
        "end": {
          "line": 809,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 24730,
      "end": 24738,
      "loc": {
        "start": {
          "line": 809,
          "column": 62
        },
        "end": {
          "line": 809,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 24738,
      "end": 24739,
      "loc": {
        "start": {
          "line": 809,
          "column": 70
        },
        "end": {
          "line": 809,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sort",
      "start": 24739,
      "end": 24743,
      "loc": {
        "start": {
          "line": 809,
          "column": 71
        },
        "end": {
          "line": 809,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 24743,
      "end": 24744,
      "loc": {
        "start": {
          "line": 809,
          "column": 75
        },
        "end": {
          "line": 809,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `sort` without parameters",
      "start": 24745,
      "end": 24783,
      "loc": {
        "start": {
          "line": 809,
          "column": 77
        },
        "end": {
          "line": 809,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 24783,
      "end": 24784,
      "loc": {
        "start": {
          "line": 809,
          "column": 115
        },
        "end": {
          "line": 809,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 24784,
      "end": 24785,
      "loc": {
        "start": {
          "line": 809,
          "column": 116
        },
        "end": {
          "line": 809,
          "column": 117
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
      "start": 24787,
      "end": 25295,
      "loc": {
        "start": {
          "line": 811,
          "column": 0
        },
        "end": {
          "line": 830,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 25296,
      "end": 25302,
      "loc": {
        "start": {
          "line": 831,
          "column": 0
        },
        "end": {
          "line": 831,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 25303,
      "end": 25308,
      "loc": {
        "start": {
          "line": 831,
          "column": 7
        },
        "end": {
          "line": 831,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sum",
      "start": 25309,
      "end": 25312,
      "loc": {
        "start": {
          "line": 831,
          "column": 13
        },
        "end": {
          "line": 831,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 25313,
      "end": 25314,
      "loc": {
        "start": {
          "line": 831,
          "column": 17
        },
        "end": {
          "line": 831,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 25315,
      "end": 25350,
      "loc": {
        "start": {
          "line": 831,
          "column": 19
        },
        "end": {
          "line": 831,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 25350,
      "end": 25351,
      "loc": {
        "start": {
          "line": 831,
          "column": 54
        },
        "end": {
          "line": 831,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 25351,
      "end": 25356,
      "loc": {
        "start": {
          "line": 831,
          "column": 55
        },
        "end": {
          "line": 831,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 25356,
      "end": 25357,
      "loc": {
        "start": {
          "line": 831,
          "column": 60
        },
        "end": {
          "line": 831,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 25357,
      "end": 25365,
      "loc": {
        "start": {
          "line": 831,
          "column": 61
        },
        "end": {
          "line": 831,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 25365,
      "end": 25366,
      "loc": {
        "start": {
          "line": 831,
          "column": 69
        },
        "end": {
          "line": 831,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sum",
      "start": 25366,
      "end": 25369,
      "loc": {
        "start": {
          "line": 831,
          "column": 70
        },
        "end": {
          "line": 831,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 25369,
      "end": 25370,
      "loc": {
        "start": {
          "line": 831,
          "column": 73
        },
        "end": {
          "line": 831,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `sum` without parameters",
      "start": 25371,
      "end": 25408,
      "loc": {
        "start": {
          "line": 831,
          "column": 75
        },
        "end": {
          "line": 831,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 25408,
      "end": 25409,
      "loc": {
        "start": {
          "line": 831,
          "column": 112
        },
        "end": {
          "line": 831,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 25409,
      "end": 25410,
      "loc": {
        "start": {
          "line": 831,
          "column": 113
        },
        "end": {
          "line": 831,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
      "start": 25412,
      "end": 26055,
      "loc": {
        "start": {
          "line": 833,
          "column": 0
        },
        "end": {
          "line": 852,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 26056,
      "end": 26062,
      "loc": {
        "start": {
          "line": 853,
          "column": 0
        },
        "end": {
          "line": 853,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 26063,
      "end": 26068,
      "loc": {
        "start": {
          "line": 853,
          "column": 7
        },
        "end": {
          "line": 853,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "union",
      "start": 26069,
      "end": 26074,
      "loc": {
        "start": {
          "line": 853,
          "column": 13
        },
        "end": {
          "line": 853,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 26075,
      "end": 26076,
      "loc": {
        "start": {
          "line": 853,
          "column": 19
        },
        "end": {
          "line": 853,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 26077,
      "end": 26112,
      "loc": {
        "start": {
          "line": 853,
          "column": 21
        },
        "end": {
          "line": 853,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 26112,
      "end": 26113,
      "loc": {
        "start": {
          "line": 853,
          "column": 56
        },
        "end": {
          "line": 853,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 26113,
      "end": 26118,
      "loc": {
        "start": {
          "line": 853,
          "column": 57
        },
        "end": {
          "line": 853,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26118,
      "end": 26119,
      "loc": {
        "start": {
          "line": 853,
          "column": 62
        },
        "end": {
          "line": 853,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 26119,
      "end": 26127,
      "loc": {
        "start": {
          "line": 853,
          "column": 63
        },
        "end": {
          "line": 853,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26127,
      "end": 26128,
      "loc": {
        "start": {
          "line": 853,
          "column": 71
        },
        "end": {
          "line": 853,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "union",
      "start": 26128,
      "end": 26133,
      "loc": {
        "start": {
          "line": 853,
          "column": 72
        },
        "end": {
          "line": 853,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26133,
      "end": 26134,
      "loc": {
        "start": {
          "line": 853,
          "column": 77
        },
        "end": {
          "line": 853,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `union` without parameters",
      "start": 26135,
      "end": 26174,
      "loc": {
        "start": {
          "line": 853,
          "column": 79
        },
        "end": {
          "line": 853,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 26174,
      "end": 26175,
      "loc": {
        "start": {
          "line": 853,
          "column": 118
        },
        "end": {
          "line": 853,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26175,
      "end": 26176,
      "loc": {
        "start": {
          "line": 853,
          "column": 119
        },
        "end": {
          "line": 853,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-computed-decorators';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
      "start": 26178,
      "end": 26837,
      "loc": {
        "start": {
          "line": 855,
          "column": 0
        },
        "end": {
          "line": 874,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 26838,
      "end": 26844,
      "loc": {
        "start": {
          "line": 875,
          "column": 0
        },
        "end": {
          "line": 875,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 26845,
      "end": 26850,
      "loc": {
        "start": {
          "line": 875,
          "column": 7
        },
        "end": {
          "line": 875,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "uniq",
      "start": 26851,
      "end": 26855,
      "loc": {
        "start": {
          "line": 875,
          "column": 13
        },
        "end": {
          "line": 875,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 26856,
      "end": 26857,
      "loc": {
        "start": {
          "line": 875,
          "column": 18
        },
        "end": {
          "line": 875,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 26858,
      "end": 26893,
      "loc": {
        "start": {
          "line": 875,
          "column": 20
        },
        "end": {
          "line": 875,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 26893,
      "end": 26894,
      "loc": {
        "start": {
          "line": 875,
          "column": 55
        },
        "end": {
          "line": 875,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 26894,
      "end": 26899,
      "loc": {
        "start": {
          "line": 875,
          "column": 56
        },
        "end": {
          "line": 875,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26899,
      "end": 26900,
      "loc": {
        "start": {
          "line": 875,
          "column": 61
        },
        "end": {
          "line": 875,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 26900,
      "end": 26908,
      "loc": {
        "start": {
          "line": 875,
          "column": 62
        },
        "end": {
          "line": 875,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26908,
      "end": 26909,
      "loc": {
        "start": {
          "line": 875,
          "column": 70
        },
        "end": {
          "line": 875,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "uniq",
      "start": 26909,
      "end": 26913,
      "loc": {
        "start": {
          "line": 875,
          "column": 71
        },
        "end": {
          "line": 875,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26913,
      "end": 26914,
      "loc": {
        "start": {
          "line": 875,
          "column": 75
        },
        "end": {
          "line": 875,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `uniq` without parameters",
      "start": 26915,
      "end": 26953,
      "loc": {
        "start": {
          "line": 875,
          "column": 77
        },
        "end": {
          "line": 875,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 26953,
      "end": 26954,
      "loc": {
        "start": {
          "line": 875,
          "column": 115
        },
        "end": {
          "line": 875,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26954,
      "end": 26955,
      "loc": {
        "start": {
          "line": 875,
          "column": 116
        },
        "end": {
          "line": 875,
          "column": 117
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26956,
      "end": 26956,
      "loc": {
        "start": {
          "line": 876,
          "column": 0
        },
        "end": {
          "line": 876,
          "column": 0
        }
      }
    }
  ]
}